{"version":3,"sources":["images/signup.svg","images/login.svg","Utils/notificationUtils.js","actions/timeline.js","actions/user.js","components/Navigation/NavbarLinks.js","components/Navigation/Navbar.js","components/Home/Home.js","components/Request/ViewRequest.js","components/ItemsList/ItemsList.js","components/Request/EditRequest.js","components/Request/Request.js","components/NewRequest/NewRequest.js","components/Timeline/ConfirmationModal.js","components/Sidebar/Sidebar.js","components/Timeline/Map.js","components/ActiveRequest/ActiveRequest.js","components/Timeline/Timeline.js","components/Feed/Feed.js","components/Auth/Signup.js","components/Auth/Login.js","components/Auth/Logout.js","components/UserInfo/UserInfo.js","components/Upload/Upload.js","actions/image.js","components/UserUpdateForm/UserUpdateForm.js","components/Settings/Settings.js","components/SettingsAdmin/CreateAdmin.js","components/SettingsAdmin/ViewUsers.js","components/SettingsAdmin/AppStats.js","components/SettingsAdmin/SettingsAdmin.js","components/App.js","reducers/AuthReducer.js","reducers/PostsReducer.js","reducers/index.js","index.js"],"names":["module","exports","notifySuccess","msg","toast","success","notifyError","error","notifyInfo","info","TL_PAYLOAD_TYPES","filterPosts","filter","currentUserLocation","dispatch","a","request","Request","method","body","JSON","stringify","distance","filterDistance","size","filterSize","reimbursement","filterPayment","currLocation","latitude","longitude","headers","Accept","fetch","response","status","json","data","type","payload","getSizeEstimate","post","sizeEstimate","items","length","getCompletedPosts","posts","getPendingPosts","getNumCompletedPosts","completedPosts","getNumPendingPosts","pendingPosts","PAYLOAD_TYPES","getUserById","id","getAllUsers","logout","then","res","catch","deleteUser","promoteUser","email","getNumUsers","users","NavbarLinks","handleUserLogout","props","className","to","this","currentUser","onClick","React","Component","connect","state","auth","Navbar","Home","ViewRequest","handlePostClick","postUser","_id","highlightPost","admin","renderItems","first_name","src","profile_picture","alt","editClick","deletePost","showConfirmation","renderItemSizeOrList","description","currentUserID","user","ItemsList","addItem","e","preventDefault","_inputElement","value","setState","name","changeItems","deleteItem","removeItem","filteredItems","item","map","index","key","onSubmit","placeholder","ref","input","EditRequest","formReimbursement","formDescription","handleItemsChange","handleReimbursementChange","target","handleDescriptionChange","handleEditRequest","newPost","editPost","onChange","selected","renderOtherPaymentOptions","exitEdit","rows","author","editState","handleEditClick","handleExitEdit","handleEditPost","postID","editedPost","NewRequest","autocompleteValue","location","handleAutocompleteChange","handleCreateRequest","lat","lng","createPost","apiKey","types","onPlaceSelected","place","geometry","formatted_address","disabled","new_post","Modal","setAppElement","ConfirmationModal","confirmation","display","isOpen","onRequestClose","closeModal","style","overlay","backgroundColor","zIndex","content","padding","border","borderRadius","boxShadow","width","minWidth","height","margin","selectedPost","acceptPost","Sidebar","handleFilterClick","filterRequest","last_name","defaultValue","handleDistanceChange","handleSizeChange","handlePaymentChange","renderProfile","renderFilter","Map","directions","previousLocation","mapSelectedPost","activeRequest","active_post","setDirections","prevState","directionsService","window","google","maps","DirectionsService","origin","destination","route","travelMode","TravelMode","DRIVING","result","DirectionsStatus","OK","console","highlightedPost","resetFeedSelectedPost","position","radius","center","setSelectedRequest","strokeColor","strokeOpacity","strokeWeight","fillColor","fillOpacity","onCloseClick","newKey","uuidv4","defaultCenter","setDefaultCenter","defaultZoom","renderLocations","withScriptjs","withGoogleMap","keys","ActiveRequest","postAuthor","completeRequest","completePost","googleMapURL","loadingElement","containerElement","mapElement","Timeline","getUserLocation","coords","handleHighlightedPostChange","handleConfirmationModal","confirmationModal","handleCloseModal","handleAcceptPost","toggleMap","showMap","currentPage","postsPerPage","handlePageClick","bind","navigator","geolocation","getCurrentPosition","num","filteredPosts","indexOfLastPost","indexOfFirstPost","currentPosts","slice","renderPosts","renderGoogleMap","renderEmptyMessage","renderPagination","Feed","handleFilterChange","newFilter","getPosts","changeFilterState","default_state","password","password_confirmation","Signup","handleChange","formSubmit","register","signupPic","first_name_error","last_name_error","email_error","password_error","password_confirmation_error","signupComp","defaultState","Login","login","loginPic","error_msg","loginComp","Logout","UserInfo","aria-hidden","Upload","uploadProfilePic","reader","FileReader","readAsDataURL","files","onloadend","addImage","img","UserUpdateForm","updateUser","adminClass","updateComp","Settings","CreateAdmin","userToPromote","handleInputChange","handleSubmit","ViewUsers","deleteUserAndPosts","rating","scole","scope","renderUsers","AppStats","num_users","num_requests_completed","num_requests_pending","getAllUserCount","getPostInfo","adminOptions","VIEW_USERS","APP_STATS","UPDATE_INFO","useState","adminOption","setAdminOption","SelectedOption","CREATE_ADMIN","App","readCookie","path","exact","component","users_state","INITIAL_STATE","combineReducers","action","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","reducers","applyMiddleware","reduxThunk","ReactDOM","render","document","getElementById"],"mappings":"6JAAAA,EAAOC,QAAU,IAA0B,oC,oBCA3CD,EAAOC,QAAU,IAA0B,mC,8dCM9BC,G,OAAgB,SAACC,GAAD,OAASC,IAAMC,QAAQF,KACvCG,EAAc,SAACH,GAAD,OAASC,IAAMG,MAAMJ,IACnCK,EAAa,SAACL,GAAD,OAASC,IAAMK,KAAKN,ICNjCO,EACG,eADHA,EAEA,YAFAA,EAGA,YAHAA,EAKE,cALFA,EAME,cANFA,EAOK,iBA8ILC,EAAc,SAACC,EAAQC,GAClC,8CAAO,WAAOC,GAAP,mBAAAC,EAAA,6DACCC,EAAU,IAAIC,QAAJ,gBAA6B,CAC3CC,OAAQ,MACRC,KAAMC,KAAKC,UAAU,CACnBC,SAAUV,EAAOW,eACjBC,KAAMZ,EAAOa,WACbC,cAAed,EAAOe,cACtBC,aAAc,CACZC,SAAUhB,EAAoBgB,SAC9BC,UAAWjB,EAAoBiB,aAGnCC,QAAS,CACPC,OAAQ,oCACR,eAAgB,sBAdf,SAiBkBC,MAAMjB,GAjBxB,UAkBmB,OADlBkB,EAjBD,QAkBQC,OAlBR,gCAmBgBD,EAASE,OAnBzB,OAmBGC,EAnBH,OAoBHvB,EAAS,CAAEwB,KAAM5B,EAA+B6B,QAASF,IApBtD,2CAAP,uDAuCWG,EAAkB,SAACC,GAC9B,OAAOC,EAAaD,IAWhBC,EAAe,SAACD,GASpB,OAPIA,EAAKE,MAAMC,QAAU,EAChB,QACEH,EAAKE,MAAMC,QAAU,EACvB,SAEA,SAuBEC,EAAiB,uCAAG,gCAAA9B,EAAA,6DACzBC,EAAU,IAAIC,QAAQ,mBAAoB,CAC9CC,OAAQ,MACRa,QAAS,CACPC,OAAQ,oCACR,eAAgB,sBALW,SASRC,MAAMjB,GATE,UAUP,OADlBkB,EATyB,QAUlBC,OAVkB,iCAWTD,EAASE,OAXA,cAWvBU,EAXuB,yBAYtBA,GAZsB,QAc7BxC,EAAY,iCAdiB,4CAAH,qDAkBjByC,EAAe,uCAAG,gCAAAhC,EAAA,6DACvBC,EAAU,IAAIC,QAAQ,iBAAkB,CAC5CC,OAAQ,MACRa,QAAS,CACPC,OAAQ,oCACR,eAAgB,sBALS,SASNC,MAAMjB,GATA,UAUL,OADlBkB,EATuB,QAUhBC,OAVgB,iCAWPD,EAASE,OAXF,cAWrBU,EAXqB,yBAYpBA,GAZoB,QAc3BxC,EAAY,+BAde,4CAAH,qDAkBf0C,EAAoB,uCAAG,4BAAAjC,EAAA,sEACL8B,IADK,cAC5BI,EAD4B,yBAE3BA,EAAeL,QAFY,2CAAH,qDAKpBM,EAAkB,uCAAG,4BAAAnC,EAAA,sEACLgC,IADK,cAC1BI,EAD0B,yBAEzBA,EAAaP,QAFY,2CAAH,qDC/QlBQ,EACD,WADCA,EAEJ,QAFIA,EAGH,SAHGA,EAIE,cAJFA,EAMC,aANDA,EAOM,kBAPNA,EAQE,cARFA,EASI,gBAqIJC,EAAW,uCAAG,WAAOC,GAAP,mBAAAvC,EAAA,6DAEnBC,EAAU,IAAIC,QADR,UAAYqC,EACS,CAC/BpC,OAAQ,MACRa,QAAS,CACPC,OAAQ,oCACR,eAAgB,sBANK,SAUFC,MAAMjB,GAVJ,UAWD,OADlBkB,EAVmB,QAWZC,OAXY,gBAYvB7B,EAAY,8CAZW,wCAcJ4B,EAASE,OAdL,eAcjBC,EAdiB,yBAehBA,GAfgB,4CAAH,sDAyBXkB,EAAW,uCAAG,gCAAAxC,EAAA,4DACb,SACNC,EAAU,IAAIC,QADR,SACqB,CAC/BC,OAAQ,MACRa,QAAS,CACPC,OAAQ,oCACR,eAAgB,sBANK,SASFC,MAAMjB,GATJ,UAUD,OADlBkB,EATmB,QAUZC,OAVY,iCAWJD,EAASE,OAXL,cAWjBC,EAXiB,yBAYhBA,GAZgB,QAcvB/B,EAAY,iDAdW,4CAAH,qDAwBXkD,EAAS,WACpB,8CAAO,WAAO1C,GAAP,SAAAC,EAAA,sDACO,gBACZkB,MADY,iBAETwB,MAAK,SAACC,GACL5C,EAAS,CAAEwB,KAAMc,OAElBO,OAAM,SAACpD,GACND,EAAY,wBAPX,2CAAP,uDAwBWsD,EAAU,uCAAG,WAAON,GAAP,mBAAAvC,EAAA,6DAElBC,EAAU,IAAIC,QADR,UAAYqC,EACS,CAC/BpC,OAAQ,SACRa,QAAS,CACPC,OAAQ,oCACR,eAAgB,sBANI,SAWDC,MAAMjB,GAXL,UAYA,OADlBkB,EAXkB,QAYXC,OAZW,wBAatBjC,EAAc,yBAbQ,SAcHgC,EAASE,OAdN,cAchBC,EAdgB,yBAefA,GAfe,QAiBtB/B,EAAY,0CAjBU,4CAAH,sDAiCVuD,EAAW,uCAAG,WAAOC,GAAP,mBAAA/C,EAAA,4DACb,SACNC,EAAU,IAAIC,QADR,SACqB,CAC/BC,OAAQ,MACRC,KAAMC,KAAKC,UAAU,CAAEyC,MAAOA,IAC9B/B,QAAS,CACPC,OAAQ,oCACR,eAAgB,sBAPK,SAUFC,MAAMjB,GAVJ,UAWD,OADlBkB,EAVmB,QAWZC,OAXY,iCAYJD,EAASE,OAZL,cAYjBC,EAZiB,yBAahBA,GAbgB,QAcM,MAApBH,EAASC,OAClB7B,EAAY,uBACiB,MAApB4B,EAASC,OAClBjC,EAAc,6BAEdI,EAAY,kBAnBW,4CAAH,sDA6EXyD,EAAW,uCAAG,4BAAAhD,EAAA,sEACLwC,IADK,cACnBS,EADmB,yBAElBA,EAAMpB,QAFY,2CAAH,qDCpUlBqB,E,4MAEJC,iBAAmB,WACjB,EAAKC,MAAMX,U,uDAGX,OACE,wBAAIY,UAAU,gBACZ,4BACE,kBAAC,IAAD,CAAMC,GAAG,KAAT,UAGAC,KAAKH,MAAMI,aACX,4BACE,kBAAC,IAAD,CAAMF,GAAG,UAAT,WAIFC,KAAKH,MAAMI,aACX,4BACE,kBAAC,IAAD,CAAMF,GAAG,WAAT,WAIHC,KAAKH,MAAMI,aACV,4BACE,kBAAC,IAAD,CAAMF,GAAG,SAAT,SAIHC,KAAKH,MAAMI,aACV,wBAAIC,QAASF,KAAKJ,kBAChB,kBAAC,IAAD,qB,GAhCcO,IAAMC,WA8CjBC,eANS,SAACC,GACvB,MAAO,CACLL,YAAaK,EAAMC,KAAKN,eAIY,CAAEf,UAA3BmB,CAAqCV,GCpCrCa,E,uKATX,OACE,yBAAKV,UAAU,SAASd,GAAIgB,KAAKH,MAAMb,IACrC,kDACA,kBAAC,EAAD,CAAaiB,YAAaD,KAAKH,MAAMI,mB,GANxBE,IAAMC,WC+DZK,G,oLA3DX,OAEE,oCACE,kBAAC,EAAD,MACA,yBAAKX,UAAU,kBACb,yBAAKA,UAAU,SACb,6BAASA,UAAU,QACjB,kDACA,sKAGG,0BAAMA,UAAU,UAAhB,uBAHH,UAKA,yBAAKA,UAAU,sBACb,yBAAKA,UAAU,eAKnB,6BAASA,UAAU,eACjB,yBAAKA,UAAU,SACb,2CACA,+WASF,yBAAKA,UAAU,6BACb,yBAAKA,UAAU,qBAInB,6BAASA,UAAU,eACjB,yBAAKA,UAAU,6BACb,yBAAKA,UAAU,oBAEjB,yBAAKA,UAAU,SACb,4CACA,uX,GA5CGK,IAAMC,Y,iBCDnBM,G,4MAEJtC,aAAe,WASb,OAPI,EAAKyB,MAAM1B,KAAKE,MAAMC,QAAU,EAC3B,QACE,EAAKuB,MAAM1B,KAAKE,MAAMC,QAAU,EAClC,SAEA,S,EAyBXqC,gBAAkB,WACZ,EAAKd,MAAMe,SAASC,MAAQ,EAAKhB,MAAMI,YAAYY,KACrD,EAAKhB,MAAMiB,cAAc,EAAKjB,MAAM1B,O,qEAnBtC,OACE6B,KAAKH,MAAMe,SAASC,MAAQb,KAAKH,MAAMI,YAAYY,KACnDb,KAAKH,MAAMI,YAAYc,MAEhB,wBAAIjB,UAAU,sBAAsBE,KAAKH,MAAMmB,eAGpD,uBAAGlB,UAAU,oBACVE,KAAKH,MAAMe,SAASK,WADvB,oBACoDjB,KAAK5B,eAAgB,IADzE,a,+BA2BI,IAAD,OACP,OACE,yBACE0B,UAAS,0BACPE,KAAKH,MAAMe,WAAaZ,KAAKH,MAAMI,YAAYY,IAC3C,GACA,gBAENX,QAASF,KAAKW,iBAEd,yBAAKb,UAAU,kBACb,yBACEA,UAAU,gBACVoB,IAAKlB,KAAKH,MAAMe,SAASO,gBACzBC,IAAI,gBAEN,2BAAOtB,UAAU,mBACf,0BAAMA,UAAU,kBACbE,KAAKH,MAAMe,SAASK,YACf,IACR,0BAAMnB,UAAU,qBAAhB,eACe,IACb,0BAAMA,UAAU,gBACbE,KAAKH,MAAM1B,KAAKf,iBAItB4C,KAAKH,MAAMe,SAASC,MAAQb,KAAKH,MAAMI,YAAYY,IAClD,oCACE,4BAAQf,UAAU,YAAYI,QAASF,KAAKH,MAAMwB,WAChD,uBAAGvB,UAAU,uBAEf,4BACEA,UAAU,cACVI,QAAS,kBACP,EAAKL,MAAMyB,WACT,EAAKzB,MAAM1B,KAAK0C,IAChB,EAAKhB,MAAMI,YAAYY,OAI3B,uBAAGf,UAAU,mBAIjB,oCACE,4BACEA,UAAU,iBACVI,QAAS,kBAAM,EAAKL,MAAM0B,iBAAiB,EAAK1B,MAAM1B,QAFxD,kBAMC6B,KAAKH,MAAMI,YAAYc,MACtB,4BACEjB,UAAU,gCACVI,QAAS,kBACP,EAAKL,MAAMyB,WACT,EAAKzB,MAAM1B,KAAK0C,IAChB,EAAKhB,MAAMI,YAAYY,OAI3B,uBAAGf,UAAU,kBAGf,uCAKR,yBAAKA,UAAU,oBACZE,KAAKwB,uBACN,uBAAG1B,UAAU,0BACX,2BAAOA,UAAU,aAAjB,0BACCE,KAAKH,MAAM1B,KAAKsD,mB,GA7HHtB,IAAMC,WA2IjBC,gBANS,SAACC,GACvB,MAAO,CACLL,YAAaK,EAAMC,KAAKN,eAIY,CAAEqB,WL7DhB,SAACtC,EAAI0C,GAC7B,8CAAO,WAAOlF,GAAP,mBAAAC,EAAA,6DACCC,EAAU,IAAIC,QAAJ,SAAsB,CACpCC,OAAQ,SACRC,KAAMC,KAAKC,UAAU,CAAEoB,KAAMa,EAAI2C,KAAMD,IACvCjE,QAAS,CACPC,OAAQ,oCACR,eAAgB,sBANf,SASkBC,MAAMjB,GATxB,UAUmB,OADlBkB,EATD,QAUQC,OAVR,iCAWgBD,EAASE,OAXzB,OAWGC,EAXH,OAYHvB,EAAS,CAAEwB,KAAM5B,EAA8B6B,QAASF,IACxDnC,EAAc,gCAbX,wBAc0B,MAApBgC,EAASC,OAClB7B,EAAY,kCAEZA,EAAY,6CAjBT,4CAAP,wDK4DaqE,CAAyCK,I,UC5CzCkB,G,4MAxFbtB,MAAQ,CACNjC,MAAO,EAAKwB,MAAMxB,O,EAWpBwD,QAAU,SAACC,GACTA,EAAEC,iBAE6B,KAA7B,EAAKC,cAAcC,OACa,MAAhC,EAAKD,cAAcC,MAAM,KAEzB,EAAKC,SAAS,CACZ7D,MAAM,GAAD,oBAAM,EAAKiC,MAAMjC,OAAjB,CAAwB,CAAE8D,KAAM,EAAKH,cAAcC,WAE1D,EAAKpC,MAAMuC,YAAX,uBACK,EAAK9B,MAAMjC,OADhB,CAEE,CAAE8D,KAAM,EAAKH,cAAcC,UAE7B,EAAKD,cAAcC,MAAQ,K,EAK/BI,WAAa,SAACC,GACZ,IAAMC,EAAgB,EAAKjC,MAAMjC,MAAM/B,QAAO,SAACkG,GAC7C,OAAOA,EAAKL,OAASG,EAAWH,QAElC,EAAKD,SAAS,CAAE7D,MAAOkE,IACvB,EAAK1C,MAAMuC,YAAYG,I,mEA7BS,IAA5BvC,KAAKH,MAAMxB,MAAMC,QAA4C,IAA5B0B,KAAKM,MAAMjC,MAAMC,QACpD0B,KAAKkC,SAAS,CAAE7D,MAAO,O,oCAiCZ,IAAD,OACZ,OAAO2B,KAAKM,MAAMjC,MAAMoE,KAAI,SAACD,EAAME,GACjC,OACE,wBACEC,IAAKD,EACLxC,QAAS,kBAAM,EAAKmC,WAAWG,IAC/B1C,UAAU,gBAET0C,EAAKL,KALR,IAKc,uBAAGrC,UAAU,uB,+BAiBvB,IAAD,OACP,OACE,oCACE,yBAAKd,GAAG,wBACN,0BAAM4D,SAAU5C,KAAK6B,SACnB,4BAAQ7C,GAAG,eAAehB,KAAK,UAA/B,YAGA,2BACE8B,UAAU,2BACV+C,YAAY,gBACZC,IAAK,SAACC,GAAD,OAAY,EAAKf,cAAgBe,OAI5C,yBAAK/D,GAAG,wBACN,wBAAIc,UAAU,sBAAsBE,KAAKgB,qB,GA1F3Bb,IAAMC,WCyIf4C,G,4MA7Hb1C,MAAQ,CACN2C,kBAAmB,EAAKpD,MAAM1B,KAAKf,cACnC8F,gBAAiB,EAAKrD,MAAM1B,KAAKsD,YACjCpD,MAAO,EAAKwB,MAAM1B,KAAKE,O,EAIzB8E,kBAAoB,SAAC9E,GACnB,EAAK6D,SAAS,CAAE7D,MAAOA,K,EAIzB+E,0BAA4B,SAACtB,GAC3B,EAAKI,SAAS,CAAEe,kBAAmBnB,EAAEuB,OAAOpB,S,EAI9CqB,wBAA0B,SAACxB,GACzB,EAAKI,SAAS,CAAEgB,gBAAiBpB,EAAEuB,OAAOpB,S,EAM5CsB,kBAAoB,SAACzB,GACnBA,EAAEC,iBACF,IAAMyB,EAAU,CACdpG,cAAe,EAAKkD,MAAM2C,kBAC1B5E,MAAO,EAAKiC,MAAMjC,MAClBoD,YAAa,EAAKnB,MAAM4C,iBAE1B,EAAKrD,MAAM4D,SAAS,EAAK5D,MAAM1B,KAAK0C,IAAK2C,I,0EAKzC,OAAQxD,KAAKH,MAAM1B,KAAKf,eACtB,IAAK,OACH,OACE,oCACE,4BAAQ6E,MAAM,cAAc,cAC5B,4BAAQA,MAAM,UAAU,WAG9B,IAAK,aACH,OACE,oCACE,4BAAQA,MAAM,QAAQ,QACtB,4BAAQA,MAAM,UAAU,WAG9B,IAAK,SACH,OACE,oCACE,4BAAQA,MAAM,QAAQ,QACtB,4BAAQA,MAAM,cAAc,eAGlC,QACE,OAAO,wC,+BAaH,IAAD,OACP,OACE,yBAAKnC,UAAU,kBACb,yBAAKA,UAAU,kBACb,yBACEA,UAAU,gBACVoB,IAAKlB,KAAKH,MAAMe,SAASO,gBACzBC,IAAI,gBAEN,2BAAOtB,UAAU,mBACf,0BAAMA,UAAU,kBACbE,KAAKH,MAAMe,SAASK,YACf,IACR,0BAAMnB,UAAU,qBAAhB,iBAEF,4BACEd,GAAG,sBACHc,UAAU,2BACV4D,SAAU,SAAC5B,GAAD,OAAO,EAAKsB,0BAA0BtB,KAEhD,4BAAQ6B,UAAQ,EAAC1B,MAAOjC,KAAKH,MAAM1B,KAAKf,eACrC4C,KAAKH,MAAM1B,KAAKf,eAElB4C,KAAK4D,6BAER,4BAAQ9D,UAAU,iBAAiBI,QAASF,KAAKuD,mBAC/C,uBAAGzD,UAAU,kBAEf,4BAAQA,UAAU,mBAAmBI,QAASF,KAAKH,MAAMgE,UACvD,uBAAG/D,UAAU,mBAGjB,yBAAKd,GAAG,kBACN,kBAAC,GAAD,CACEoD,YAAapC,KAAKmD,kBAClB9E,MAAO2B,KAAKM,MAAMjC,SAGtB,yBAAKW,GAAG,yBACN,2BAAOc,UAAU,aAAjB,0BACA,8BACEmC,MAAOjC,KAAKM,MAAM4C,gBAClBpD,UAAU,uBACV+C,YAAY,+BACZa,SAAU1D,KAAKsD,wBACfQ,KAAK,Y,GAhIS3D,IAAMC,WCK1BzD,I,mNASJ2D,MAAQ,CAAEM,SAAU,EAAKf,MAAM1B,KAAK4F,OAAQC,WAAW,G,EAavDC,gBAAkB,WAChB,EAAK/B,SAAS,CAAE8B,WAAW,K,EAI7BE,eAAiB,WACf,EAAKhC,SAAS,CAAE8B,WAAW,K,EAM7BG,eAAiB,SAACnF,EAAIb,GACpB,EAAK+F,iBACL,EAAKrE,MAAM4D,SAASzE,EAAIb,EAAM,EAAK0B,MAAMI,YAAYY,M,EAKvDG,YAAc,WACZ,OAAO,EAAKnB,MAAM1B,KAAKE,MAAMoE,KAAI,SAACD,GAChC,OACE,wBAAIG,IAAKH,EAAK3B,IAAKf,UAAU,gBAC1B0C,EAAKL,U,mEA/BVnC,KAAKM,MAAMM,UACXZ,KAAKH,MAAM1B,KAAK4F,QAChB/D,KAAKH,MAAM1B,KAAK4F,OAAOlD,MAAQb,KAAKM,MAAMM,SAASC,KAEnDb,KAAKkC,SAAS,CAAEtB,SAAUZ,KAAKH,MAAM1B,KAAK4F,W,+BA0C5C,OAA4B,OAAxB/D,KAAKM,MAAMM,SACRZ,KAAKM,MAAM0D,UAaZ,kBAAC,GAAD,CACEP,SAAUzD,KAAKmE,eACfN,SAAU7D,KAAKkE,eACf/F,KAAM6B,KAAKH,MAAM1B,KACjByC,SAAUZ,KAAKM,MAAMM,WAfvB,kBAAC,GAAD,CACEE,cAAed,KAAKH,MAAMiB,cAC1BS,iBAAkBvB,KAAKH,MAAM0B,iBAC7BP,YAAahB,KAAKgB,YAClBK,UAAWrB,KAAKiE,gBAChB9F,KAAM6B,KAAKH,MAAM1B,KACjByC,SAAUZ,KAAKM,MAAMM,WAcpB,yC,GAnFST,IAAMC,YA8FbC,gBANS,SAACC,GACvB,MAAO,CACLL,YAAaK,EAAMC,KAAKN,eAIY,CAAEwD,SRgBlB,SAACW,EAAQC,EAAY3C,GAC3C,8CAAO,WAAOlF,GAAP,mBAAAC,EAAA,6DACCC,EAAU,IAAIC,QAAJ,iBAAsByH,GAAU,CAC9CxH,OAAQ,MACRC,KAAMC,KAAKC,UAAU,CAAEoB,KAAMkG,EAAY1C,KAAMD,IAC/CjE,QAAS,CACPC,OAAQ,oCACR,eAAgB,sBANf,SASkBC,MAAMjB,GATxB,UAUmB,OADlBkB,EATD,QAUQC,OAVR,iCAWgBD,EAASE,OAXzB,OAWGC,EAXH,OAYHvB,EAAS,CAAEwB,KAAM5B,EAA4B6B,QAASF,IACtDnC,EAAc,+BAbX,wBAc0B,MAApBgC,EAASC,OAClB7B,EAAY,kCAEZA,EAAY,4CAjBT,4CAAP,wDQjBaqE,CAAuC1D,I,qBC5FhD2H,I,mNAaJhE,MAAQ,CACNjC,MAAO,GACP4E,kBAAmB,KACnBC,gBAAiB,KACjBqB,kBAAmB,GACnBC,SAAU,M,EAIZrB,kBAAoB,SAAC9E,GACnB,EAAK6D,SAAS,CAAE7D,MAAOA,K,EAIzB+E,0BAA4B,SAACtB,GAC3B,EAAKI,SAAS,CAAEe,kBAAmBnB,EAAEuB,OAAOpB,S,EAI9CqB,wBAA0B,SAACxB,GACzB,EAAKI,SAAS,CAAEgB,gBAAiBpB,EAAEuB,OAAOpB,S,EAI5CwC,yBAA2B,SAAC3C,GAC1B,EAAKI,SAAS,CAAEqC,kBAAmBzC,EAAEuB,OAAOpB,S,EAS9CyC,oBAAsB,SAAC5C,GAErB,GADAA,EAAEC,iBAEiC,KAAjC,EAAKzB,MAAMiE,mBACsB,OAAjC,EAAKjE,MAAM2C,mBACX,EAAK3C,MAAMjC,MAAMC,OAAS,GACE,OAA5B,EAAKgC,MAAMkE,SAASG,KACQ,OAA5B,EAAKrE,MAAMkE,SAASI,IACpB,CAIA,IAAMpB,EAAU,CACdO,OAAQ,EAAKlE,MAAMI,YAAYjB,GAC/BwF,SAAU,EAAKlE,MAAMkE,SACrBpH,cAAe,EAAKkD,MAAM2C,kBAC1B5E,MAAO,EAAKiC,MAAMjC,MAClBoD,YAAa,EAAKnB,MAAM4C,iBAG1B,EAAKhB,SAAS,CACZgB,gBAAiB,KACjBD,kBAAmB,KACnBsB,kBAAmB,GACnBlG,MAAO,GACPmG,SAAU,CAAEG,IAAK,KAAMC,IAAK,QAE9B,EAAK/E,MAAMgF,WAAWrB,EAAS,EAAK3D,MAAMI,YAAYY,SACZ,KAAjC,EAAKP,MAAMiE,kBACpBrI,EAAW,6CAC+B,OAAjC,EAAKoE,MAAM2C,kBACpB/G,EAAW,iDAC0B,IAA5B,EAAKoE,MAAMjC,MAAMC,QAC1BpC,EAAW,yD,uDAsBL,IAAD,OACP,OACE,yBAAK4D,UAAU,eACb,yBAAKA,UAAU,2BACb,yBAAKoB,IAAKlB,KAAKH,MAAMI,YAAYkB,gBAAiBC,IAAI,gBACtD,8BACEa,MAAOjC,KAAKM,MAAM4C,gBAAkBlD,KAAKM,MAAM4C,gBAAkB,GACjEpD,UAAU,uBACV+C,YAAY,iDACZa,SAAU1D,KAAKsD,wBACfQ,KAAK,OAGT,yBAAKhE,UAAU,oBACb,kBAAC,KAAD,CACE4D,SAAU1D,KAAKyE,yBACfxC,MAAOjC,KAAKM,MAAMiE,kBAClBvF,GAAG,gBACH6D,YAAY,mCACZiC,OAAQ,0CACRC,MAAO,CAAC,WACRC,gBAAiB,SAACC,GAChB,EAAK/C,SAAS,CACZsC,SAAU,CACRG,IAAKM,EAAMC,SAASV,SAASG,MAC7BC,IAAKK,EAAMC,SAASV,SAASI,OAE/BL,kBAAmBU,EAAME,uBAI/B,yBAAKrF,UAAU,gBACb,4BACEA,UAAU,2BACV4D,SAAU,SAAC5B,GAAD,OAAO,EAAKsB,0BAA0BtB,KAE/C9B,KAAKM,MAAM2C,kBACV,qCAEA,4BAAQU,UAAQ,EAACyB,UAAQ,EAACnD,MAAO,MAAjC,iBAIF,4BAAQA,MAAM,QAAQ,QACtB,4BAAQA,MAAM,cAAc,cAC5B,4BAAQA,MAAM,UAAU,aAI9B,yBAAKnC,UAAU,sBACb,kBAAC,GAAD,CACEsC,YAAapC,KAAKmD,kBAClB9E,MAAO2B,KAAKM,MAAMjC,SAGtB,4BACEL,KAAK,SACL8B,UAAU,kBACVI,QAASF,KAAK0E,qBAHhB,uB,GA7JiBvE,IAAMC,YAyKhBC,eAAQ,KAAM,CAAEwE,WTjIL,SAACQ,EAAU3D,GACnC,8CAAO,WAAOlF,GAAP,mBAAAC,EAAA,6DACCC,EAAU,IAAIC,QAAQ,SAAU,CACpCC,OAAQ,OACRC,KAAMC,KAAKC,UAAU,CAAEoB,KAAMkH,EAAU1D,KAAMD,IAC7CjE,QAAS,CACPC,OAAQ,oCACR,eAAgB,sBANf,SASkBC,MAAMjB,GATxB,UAUmB,OADlBkB,EATD,QAUQC,OAVR,iCAWgBD,EAASE,OAXzB,OAWGC,EAXH,OAYHvB,EAAS,CAAEwB,KAAM5B,EAA8B6B,QAASF,IACxDnC,EAAc,kCAbX,wBAeHI,EAAY,+CAfT,4CAAP,wDSgIaqE,CAA8BiE,I,4BC7K7CgB,KAAMC,cAAc,S,IAsFLC,G,uKAzEH,IAAD,OACP,OAAIxF,KAAKH,MAAM4F,aAAaC,QAExB,kBAAC,KAAD,CACEC,SAAQ3F,KAAKH,MAAM4F,aAAaC,QAChCE,eAAgB5F,KAAKH,MAAMgG,WAC3BC,MAAO,CACLC,QAAS,CACPC,gBAAiB,kBACjBC,OAAQ,MAEVC,QAAS,CACPC,QAAS,IACTC,OAAQ,OACRC,aAAc,MACdC,UAAW,2BACXN,gBAAiB,0BACjBO,MAAO,MACPC,SAAU,QACVC,OAAQ,OACRC,OAAQ,UAIZ,yBAAK5G,UAAU,6BACb,4BACEd,GAAG,kBACHc,UAAU,mBACVI,QAASF,KAAKH,MAAMgG,YAEpB,uBAAG/F,UAAU,kBAEf,gFAEF,yBAAKA,UAAU,qBACb,yBAAKA,UAAU,uBACb,kDACA,yBACEoB,IACElB,KAAKH,MAAM4F,aAAakB,aAAa5C,OAAO5C,gBAE9CC,IAAI,sBAEN,yBAAKtB,UAAU,gBACb,2BAAIE,KAAKH,MAAM4F,aAAakB,aAAa5C,OAAO9C,cAGpD,yBAAKnB,UAAU,qBACb,kDACA,2BAAI5B,EAAgB8B,KAAKH,MAAM4F,aAAakB,iBAGhD,yBAAK7G,UAAU,wBACb,4BAAQA,UAAU,gBAAgBI,QAASF,KAAKH,MAAMgG,YAAtD,UAGA,4BACE/F,UAAU,gBACVI,QAAS,kBACP,EAAKL,MAAM+G,WAAW,EAAK/G,MAAM4F,aAAakB,gBAHlD,aAYC,yC,GAhFmBxG,IAAMC,W,UCChCyG,I,mNAGJvG,MAAQ,CAAErD,eAAgB,KAAME,WAAY,KAAME,cAAe,M,EAGjEuC,iBAAmB,WACjB,EAAKC,MAAMX,U,EAoBb4H,kBAAoB,WAClB,IAAMC,EAAa,gBACd,EAAKzG,OAEV,EAAKT,MAAMxD,YAAY0K,EAAe,EAAKlH,MAAMtD,sB,mEApB9BuF,GACI,iBAAnBA,EAAEuB,OAAOpB,OAEXjC,KAAKkC,SAAS,CAAEjF,eAAgB6E,EAAEuB,OAAOpB,U,uCAG5BH,GACf9B,KAAKkC,SAAS,CAAE/E,WAAY2E,EAAEuB,OAAOpB,U,0CAEnBH,GAClB9B,KAAKkC,SAAS,CAAE7E,cAAeyE,EAAEuB,OAAOpB,U,sCAexC,IAAMhC,EAAcD,KAAKH,MAAMI,YAC/B,OACE,oCACE,yBAAKH,UAAU,kBACb,yBAAKoB,IAAKjB,EAAYkB,gBAAiBC,IAAI,YAC3C,yBAAKtB,UAAU,gBACb,2BACGG,EAAYgB,WADf,IAC4BhB,EAAY+G,aAI5C,yBAAKhI,GAAG,gBACN,kBAAC,IAAD,CAAMe,GAAG,KAAT,QACA,kBAAC,IAAD,CAAMA,GAAG,aAAT,YACA,4BAAQG,QAASF,KAAKJ,kBAAtB,e,qCAKQ,IAAD,OACb,OACE,yBAAKE,UAAU,kBACb,yBAAKA,UAAU,oBACb,4BACEmH,aAAc,MACdvD,SAAU,SAAC5B,GAAD,OAAO,EAAKoF,qBAAqBpF,KAE3C,4BAAQG,MAAM,OAAd,gBACA,4BAAQA,MAAM,KAAK,SACnB,4BAAQA,MAAM,KAAK,SACnB,4BAAQA,MAAM,MAAM,UACpB,4BAAQA,MAAM,MAAM,UAGtB,4BACEgF,aAAc,MACdvD,SAAU,SAAC5B,GAAD,OAAO,EAAKqF,iBAAiBrF,KAEvC,4BAAQG,MAAM,OAAd,YACA,4BAAQA,MAAM,SAAd,SACA,4BAAQA,MAAM,UAAd,UACA,4BAAQA,MAAM,SAAd,UAGF,4BACEgF,aAAc,MACdvD,SAAU,SAAC5B,GAAD,OAAO,EAAKsF,oBAAoBtF,KAE1C,4BAAQG,MAAM,OAAd,eACA,4BAAQA,MAAM,QAAd,QACA,4BAAQA,MAAM,cAAd,cACA,4BAAQA,MAAM,UAAd,YAIJ,4BACEjE,KAAK,SACL8B,UAAU,gBACVI,QAASF,KAAK8G,mBAHhB,sB,+BAYJ,OACE,yBAAKhH,UAAU,WACZE,KAAKqH,gBACLrH,KAAKsH,oB,GA1GQnH,IAAMC,YAqHbC,gBALS,SAACC,GACvB,MAAO,CACLL,YAAaK,EAAMC,KAAKN,eAGY,CAAEf,SAAQ7C,eAAnCgE,CAAkDwG,I,SC/G3DU,G,4MAWJjH,MAAQ,CACNkH,WAAY,KACZC,iBAAkB,KAClBC,gBAAiB,KACjBC,cAAe,EAAK9H,MAAM+H,YAAc,EAAK/H,MAAMrB,MAAM,GAAK,M,kEAG1DwB,KAAKM,MAAMqH,eAAiB3H,KAAKH,MAAMtD,qBACzCyD,KAAK6H,kB,yCAIUC,GAEf9H,KAAKM,MAAMqH,eACX3H,KAAKH,MAAMtD,qBACuB,OAAlCuL,EAAUvL,qBAEVyD,KAAK6H,kB,sCAIQ,IAAD,OACRE,EAAoB,IAAIC,OAAOC,OAAOC,KAAKC,kBAE3CC,EAAS,CACbzD,IAAK3E,KAAKH,MAAMtD,oBAAoBgB,SACpCqH,IAAK5E,KAAKH,MAAMtD,oBAAoBiB,WAEhC6K,EAAcrI,KAAKM,MAAMqH,cAAcnD,SAE7CuD,EAAkBO,MAChB,CACEF,OAAQA,EACRC,YAAaA,EACbE,WAAYP,OAAOC,OAAOC,KAAKM,WAAWC,UAE5C,SAACC,EAAQ7K,GACHA,IAAWmK,OAAOC,OAAOC,KAAKS,iBAAiBC,GACjD,EAAK1G,SAAS,CACZsF,WAAYkB,IAGdG,QAAQ5M,MAAR,oCAA2CyM,S,yCAOhCvK,GACjB,IAAMsJ,EAAmBzH,KAAKH,MAAMiJ,gBAChC9I,KAAKH,MAAMiJ,gBACX9I,KAAKM,MAAMoH,gBACf1H,KAAKH,MAAMkJ,sBAAsB,MACjC/I,KAAKkC,SAAS,CACZuF,iBAAkBA,EAAmBA,EAAiBjD,SAAW,KACjEkD,gBAAiBvJ,M,yCAOnB,OAAI6B,KAAKM,MAAMqH,cACN3H,KAAKM,MAAMqH,cAAcnD,SACvBxE,KAAKH,MAAMiJ,gBACb9I,KAAKH,MAAMiJ,gBAAgBtE,SACzBxE,KAAKM,MAAMoH,gBACb1H,KAAKM,MAAMoH,gBAAgBlD,SACzBxE,KAAKM,MAAMmH,iBACbzH,KAAKM,MAAMmH,iBACTzH,KAAKH,MAAMtD,oBACb,CACLoI,IAAK3E,KAAKH,MAAMtD,oBAAoBgB,SACpCqH,IAAK5E,KAAKH,MAAMtD,oBAAoBiB,WAG/B,CAAEmH,IAAK,SAAUC,KAAM,a,wCAOf,IAAD,OAChB,OAAI5E,KAAKM,MAAMqH,cACN3H,KAAKH,MAAMrB,MAAMiE,KAAI,SAACtE,GAAD,OAC1B,kBAAC,UAAD,CAAQwE,IAAKxE,EAAKa,GAAIgK,SAAU,EAAK1I,MAAMqH,cAAcnD,UACvD,kBAAC,cAAD,KACE,yBAAK1E,UAAU,sBACZ,EAAKQ,MAAMqH,cAAclG,kBAM3BzB,KAAKH,MAAMrB,MAAMiE,KAAI,SAACtE,GAAD,OAC1B,oCACE,kBAAC,UAAD,CACEwE,IAAKxE,EAAK0C,IACVoI,OAAQ,IACRC,OAAQ,CAAEvE,IAAKxG,EAAKqG,SAASG,IAAKC,IAAKzG,EAAKqG,SAASI,KACrD1E,QAAS,WACP,EAAKiJ,mBAAmBhL,IAE1BiL,YAAY,cACZC,cAAe,GACfC,aAAc,EACdC,UAAU,UACVC,YAAa,KAEd,EAAKlJ,MAAMoH,iBACZvJ,EAAKqG,SAASG,MAAQ,EAAKrE,MAAMoH,gBAAgBlD,SAASG,KAC1DxG,EAAKqG,SAASI,MAAQ,EAAKtE,MAAMoH,gBAAgBlD,SAASI,IACxD,kBAAC,cAAD,CACEoE,SAAU,EAAK1I,MAAMoH,gBAAgBlD,SACrCiF,aAAc,kBAAM,EAAKN,mBAAmB,QAE5C,yBAAKrJ,UAAU,oBACb,yBAAKA,UAAU,sBACb,yBACEA,UAAU,oBACVoB,IAAK,EAAKZ,MAAMoH,gBAAgB3D,OAAO5C,gBACvCC,IAAI,WAEN,0BAAMtB,UAAU,sBACb,EAAKQ,MAAMoH,gBAAgB3D,OAAO9C,WADrC,eAIF,yBAAKnB,UAAU,eACZ5B,EAAgB,EAAKoC,MAAMoH,kBAE9B,yBAAK5H,UAAU,sBACZ,EAAKQ,MAAMoH,gBAAgBjG,eAIhC,KACH,EAAK5B,MAAMiJ,iBACZ3K,EAAKqG,SAASG,MAAQ,EAAK9E,MAAMiJ,gBAAgBtE,SAASG,KAC1DxG,EAAKqG,SAASI,MAAQ,EAAK/E,MAAMiJ,gBAAgBtE,SAASI,IACxD,kBAAC,cAAD,CACEoE,SAAU,EAAKnJ,MAAMiJ,gBAAgBtE,SACrCiF,aAAc,kBAAM,EAAKN,mBAAmB,QAE5C,yBAAKrJ,UAAU,oBACb,yBAAKA,UAAU,sBACb,yBACEA,UAAU,oBACVoB,IAAK,EAAKrB,MAAMiJ,gBAAgB/E,OAAO5C,gBACvCC,IAAI,WAEN,0BAAMtB,UAAU,sBACb,EAAKD,MAAMiJ,gBAAgB/E,OAAO9C,WADrC,eAIF,yBAAKnB,UAAU,eACZ5B,EAAgB,EAAK2B,MAAMiJ,kBAG9B,yBAAKhJ,UAAU,sBACZ,EAAKD,MAAMiJ,gBAAgBrH,eAIhC,W,+BAOV,IAAMiI,EAASC,eACf,OAAI3J,KAAKM,MAAMqH,eAAiB3H,KAAKM,MAAMkH,WAEvC,kBAAC,aAAD,CACE7E,IAAK+G,EACLE,cAAe5J,KAAK6J,mBACpBC,YAAa,IAEb,kBAAC,sBAAD,CAAoBtC,WAAYxH,KAAKM,MAAMkH,cAK7C,kBAAC,aAAD,CACE7E,IAAK+G,EACLI,YAAa,GACbF,cAAe5J,KAAK6J,oBAEnB7J,KAAK+J,uB,GA1ME5J,IAAMC,WAiNT4J,2BAAaC,yBAAc1C,KCrNpC2C,I,OAEE,2CAGFC,G,4MACJ7J,MAAQ,CACN8J,WAAY,EAAKvK,MAAMI,YAAY2H,YAAY7D,Q,EAGjDsG,gBAAkB,WAChB,EAAKxK,MAAMyK,aACT,EAAKzK,MAAMI,YAAY2H,YAAY/G,IACnC,EAAKhB,MAAMI,YAAYY,M,EAI3BG,YAAc,WACZ,OAAO,EAAKnB,MAAMI,YAAY2H,YAAYvJ,MAAMoE,KAAI,SAACD,GACnD,OACE,wBAAIG,IAAKgH,eAAU7J,UAAU,gBAC1B0C,EAAKL,U,uDAOZ,OAA2C,OAAvCnC,KAAKH,MAAMI,YAAY2H,YAEvB,oCACE,kBAAC,GAAD,CAASrL,oBAAqByD,KAAKH,MAAMtD,sBACzC,yBAAKuD,UAAU,YACb,yBAAKA,UAAU,4BACb,yBAAKA,UAAU,yBACb,8DAEF,yBAAKA,UAAU,yBACb,4BACGE,KAAKM,MAAM8J,WAAWnJ,WADzB,eAKF,yBAAKnB,UAAU,aACb,kBAAC,GAAD,CACEvD,oBAAqByD,KAAKH,MAAMtD,oBAChCqL,aAAa,EACbpJ,MAAO,CAACwB,KAAKH,MAAMI,YAAY2H,aAC/B2C,aAAY,gGAA2FL,IACvGM,eAAgB,yBAAK1E,MAAO,CAAEW,OAAQ,UACtCgE,iBAAkB,yBAAK3E,MAAO,CAAEW,OAAQ,UACxCiE,WAAY,yBAAK5E,MAAO,CAAEW,OAAQ,aAGtC,yBAAK3G,UAAU,0BACb,kDACA,wBAAIA,UAAU,sBAAsBE,KAAKgB,gBAE3C,yBAAKlB,UAAU,sBACb,uDACA,2BAAIE,KAAKH,MAAMI,YAAY2H,YAAYnG,cAEzC,yBAAK3B,UAAU,sBACb,4BAAQd,GAAG,mBAAmBkB,QAASF,KAAKqK,iBAA5C,yBASH,yC,GAnEelK,IAAMC,WA8EnBC,gBANS,SAACC,GACvB,MAAO,CACLL,YAAaK,EAAMC,KAAKN,eAIY,CAAEqK,aZsNd,SAACnM,EAAMwD,GACjC,8CAAO,WAAOnF,GAAP,mBAAAC,EAAA,6DACCC,EAAU,IAAIC,QAAJ,0BAA+BwB,GAAQ,CACrDvB,OAAQ,MACRC,KAAMC,KAAKC,UAAU,CAAE4E,KAAMA,IAC7BlE,QAAS,CACPC,OAAQ,oCACR,eAAgB,sBANf,SASkBC,MAAMjB,GATxB,UAUmB,OADlBkB,EATD,QAUQC,OAVR,iCAWgBD,EAASE,OAXzB,OAWGC,EAXH,OAYHvB,EAAS,CAAEwB,KAAMc,EAA6Bb,QAASF,IACvDvB,EAAS,CAAEwB,KAAM5B,EAA4B6B,QAASF,EAAKS,QAC3D5C,EAAc,sBAdX,wBAgBHI,EAAY,gDAhBT,4CAAP,wDYvNaqE,CAA2C8J,IC9EpDD,I,OAEE,2CAGFS,G,kDACJ,WAAY9K,GAAQ,IAAD,8BACjB,cAAMA,IAmCR+K,gBAAkB,SAAC5B,GACjB,EAAK9G,SAAS,CAAE3F,oBAAqByM,EAAS6B,UArC7B,EA+CnBC,4BAA8B,SAAC3M,GAC7B,EAAK+D,SAAS,CAAE4G,gBAAiB3K,KAhDhB,EAoDnB4M,wBAA0B,SAAC5M,GACzB,EAAK+D,SAAS,CAAE8I,kBAAmB,CAAEtF,SAAS,EAAMiB,aAAcxI,MArDjD,EAyDnB8M,iBAAmB,WACjB,EAAK/I,SAAS,CACZ8I,kBAAmB,CAAEtF,SAAS,EAAOiB,aAAc,SA3DpC,EAuEnBuE,iBAAmB,SAAC/M,GAClB,EAAK8M,mBACL,EAAKpL,MAAM+G,WAAWzI,EAAK0C,IAAK,EAAKhB,MAAMI,YAAYY,MAzEtC,EAmFnBsK,UAAY,WACV,EAAKjJ,SAAS,CACZkJ,SAAU,EAAK9K,MAAM8K,WAvEvB,EAAK9K,MAAQ,CACX8K,SAAS,EACT7O,oBAAqB,KACrBuM,gBAAiB,KACjBkC,kBAAmB,CACjBtF,SAAS,EACTiB,aAAc,MAEhB0E,YAAa,EACbC,aAAc,GAEhB,EAAKC,gBAAkB,EAAKA,gBAAgBC,KAArB,iBAzBN,E,gEA6BbC,UAAUC,YACZD,UAAUC,YAAYC,mBAAmB3L,KAAK4K,iBAE9C5O,EAAY,kD,oCAUd,OAAOK,EAAY2D,KAAKH,MAAMrB,MAAOwB,KAAKH,MAAMrB,S,sCAmClCoN,GACd5L,KAAKkC,SAAS,CACZmJ,YAAarL,KAAKM,MAAM+K,YAAcO,M,yCAStB,IAAD,OACjB,OACE,oCAC8B,IAA3B5L,KAAKM,MAAM+K,YACV,yBAAKvL,UAAU,0BACb,uBAAGA,UAAU,6BADf,iBAKA,yBACEA,UAAU,gBACVI,QAAS,kBAAM,EAAKqL,iBAAiB,KAErC,uBAAGzL,UAAU,6BAJf,gBASF,yBAAKA,UAAU,gBAAf,QAAoCE,KAAKM,MAAM+K,aAC9CrL,KAAKM,MAAM+K,YAAcrL,KAAKM,MAAMgL,cACrCtL,KAAKH,MAAMrB,MAAMF,OACf,yBAAKwB,UAAU,0BAAf,YAEE,uBAAGA,UAAU,+BAGf,yBACEA,UAAU,gBACVI,QAAS,kBAAM,EAAKqL,gBAAgB,KAFtC,YAKE,uBAAGzL,UAAU,kC,2CASrB,OACE,yBAAKA,UAAU,iBAAf,6C,sCAKY+L,GACd,OACE,yBAAK/L,UAAU,yBACb,yBACEA,UAAS,8BAAyBE,KAAKM,MAAM8K,QAAU,GAAK,SAE5D,kBAAC,GAAD,CACE7O,oBAAqByD,KAAKM,MAAM/D,oBAChCwM,sBAAuB/I,KAAK8K,4BAC5BhC,gBAAiB9I,KAAKM,MAAMwI,gBAC5BlB,aAAa,EACbpJ,MAAOqN,EACPtB,aAAY,gGAA2FL,IACvGM,eAAgB,yBAAK1E,MAAO,CAAEW,OAAQ,UACtCgE,iBAAkB,yBAAK3E,MAAO,CAAEW,OAAQ,UACxCiE,WAAY,yBAAK5E,MAAO,CAAEW,OAAQ,aAGtC,6BACE,4BAAQ3G,UAAU,aAAaI,QAASF,KAAKmL,WAC1CnL,KAAKM,MAAM8K,QAAU,WAAa,gB,+BAoBnC,IAAD,OACP,GAA2C,OAAvCpL,KAAKH,MAAMI,YAAY2H,YACzB,OACE,kBAAC,GAAD,CAAerL,oBAAqByD,KAAKM,MAAM/D,sBAGjD,GAAwB,MAApByD,KAAKH,MAAMrB,MAAe,CAC5B,IAAIA,EAAQwB,KAAKH,MAAMrB,MADK,EAEQwB,KAAKM,MAAnC+K,EAFsB,EAEtBA,YAAaC,EAFS,EAETA,aACfQ,EAAkBT,EAAcC,EAChCS,EAAmBD,EAAkBR,EACrCU,EAAexN,EAAMyN,MAAMF,EAAkBD,GAE7B,IAAhBT,GAA6C,IAAxBW,EAAa1N,SAGpCyN,GADAD,GADAT,EAAc,GACkBC,GACKA,EACrCU,EAAexN,EAAMyN,MAAMF,EAAkBD,IAG/C,IAAMI,EAAcF,EAAavJ,KAAI,SAACtE,EAAMuE,GAC1C,OACE,kBAAC,GAAD,CACE5B,cAAe,EAAKgK,4BACpBvJ,iBAAkB,EAAKwJ,wBACvBpI,IAAKD,EACLvE,KAAMA,OAKZ,OACE,oCACE,kBAAC,GAAD,CAAS5B,oBAAqByD,KAAKM,MAAM/D,sBACzC,yBAAKuD,UAAU,YACZE,KAAKmM,gBAAgBH,GACtB,kBAAC,GAAD,CAAY/L,YAAaD,KAAKH,MAAMI,cACX,IAAxB+L,EAAa1N,OACZ0B,KAAKoM,qBAEL,oCACE,wBAAItM,UAAU,SAASoM,GACvB,yBAAKlN,GAAG,cAAcgB,KAAKqM,sBAIjC,kBAAC,GAAD,CACEzF,WAAY5G,KAAKkL,iBACjBzF,aAAczF,KAAKM,MAAM0K,kBACzBnF,WAAY7F,KAAKiL,oBAKvB,OAAO,yC,GArOQ9K,IAAMC,WAkPdC,gBAPS,SAACC,GACvB,MAAO,CACLL,YAAaK,EAAMC,KAAKN,YACxBzB,MAAO8B,EAAM9B,MAAMA,SAIiB,CAAEoI,WbwBhB,SAACzI,EAAMwD,GAC/B,8CAAO,WAAOnF,GAAP,mBAAAC,EAAA,6DACCC,EAAU,IAAIC,QAAJ,wBAA6BwB,GAAQ,CACnDvB,OAAQ,MACRC,KAAMC,KAAKC,UAAU,CAAE4E,KAAMA,IAC7BlE,QAAS,CACPC,OAAQ,oCACR,eAAgB,sBANf,SASkBC,MAAMjB,GATxB,UAUmB,OADlBkB,EATD,QAUQC,OAVR,iCAWgBD,EAASE,OAXzB,OAWGC,EAXH,OAYHvB,EAAS,CAAEwB,KAAMc,EAA2Bb,QAASF,IACrDnC,EAAc,oBAbX,wBAeHI,EAAY,+CAfT,4CAAP,wDazBaqE,CAAyCsK,IC7PlD2B,I,mNAaJhM,MAAQ,CACNrD,eAAgB,KAChBE,WAAY,KACZE,cAAe,KACf6E,SAAU,EAAKA,SAASsJ,KAAd,kB,EASZe,mBAAqB,SAACC,GACpB,EAAKtK,SAAL,gBAAmBsK,K,kEANnBxM,KAAKH,MAAM4M,a,+BAuBX,OAA+B,OAA3BzM,KAAKH,MAAMI,YACN,kBAAC,IAAD,CAAUF,GAAG,WAGlB,yBAAKD,UAAU,uBACb,kBAAC,GAAD,CAAU4M,kBAAmB1M,KAAKuM,0B,GAjDzBpM,IAAMC,YA8DVC,gBANS,SAACC,GACvB,MAAO,CACLL,YAAaK,EAAMC,KAAKN,eAIY,CAAEwM,SfpDlB,WACtB,8CAAO,WAAOjQ,GAAP,mBAAAC,EAAA,6DACCC,EAAU,IAAIC,QAAQ,SAAU,CACpCC,OAAQ,MACRa,QAAS,CACPC,OAAQ,oCACR,eAAgB,sBALf,SAQkBC,MAAMjB,GARxB,UASmB,OADlBkB,EARD,QASQC,OATR,iCAUgBD,EAASE,OAVzB,OAUGC,EAVH,OAWHvB,EAAS,CAAEwB,KAAM5B,EAA4B6B,QAASF,IAXnD,wBAaH/B,EAAY,6CAbT,4CAAP,wDemDaqE,CAAuCiM,I,uCC5DhDK,GAAgB,CAEpB1L,WAAY,GACZ+F,UAAW,GACXxH,MAAO,GACPoN,SAAU,GACVC,sBAAuB,IAGnBC,G,4MACJxM,MAAQqM,G,EAERI,aAAe,SAACjL,GACd,IAAMuB,EAASvB,EAAEuB,OACXpB,EAAQoB,EAAOpB,MACfE,EAAOkB,EAAOlB,KAEpB,EAAKD,SAAL,gBACGC,EAAOF,K,EAIZ+K,WAAa,SAAClL,GACZA,EAAEC,iBACF,EAAKlC,MAAMoN,SAAS,EAAK3M,Q,uDAIzB,OAAIN,KAAKH,MAAMI,YACN,kBAAC,IAAD,CAAUF,GAAG,UAGpB,oCAEE,kBAAC,EAAD,MACA,yBAAKD,UAAU,0BACb,yBAAKA,UAAU,kBACb,sCACA,yBAAKoB,IAAKgM,KAAW9L,IAAI,WACzB,0BAAMwB,SAAU5C,KAAKgN,YACnB,yBAAKlN,UAAU,cACb,2BACEqC,KAAK,aACLnE,KAAK,OACL6E,YAAY,aACZa,SAAU1D,KAAK+M,eAEjB,uBAAGjN,UAAU,aAAaE,KAAKM,MAAM6M,mBAEvC,yBAAKrN,UAAU,cACb,2BACEqC,KAAK,YACLnE,KAAK,OACL6E,YAAY,YACZa,SAAU1D,KAAK+M,eAEjB,uBAAGjN,UAAU,aAAaE,KAAKM,MAAM8M,kBAEvC,yBAAKtN,UAAU,cACb,2BACEqC,KAAK,QACLnE,KAAK,QACL6E,YAAY,QACZa,SAAU1D,KAAK+M,eAGjB,uBAAGjN,UAAU,aAAaE,KAAKM,MAAM+M,cAEvC,yBAAKvN,UAAU,cACb,2BACEqC,KAAK,WACLnE,KAAK,WACL6E,YAAY,WACZa,SAAU1D,KAAK+M,eAGjB,uBAAGjN,UAAU,aAAaE,KAAKM,MAAMgN,iBAEvC,yBAAKxN,UAAU,cACb,2BACEqC,KAAK,wBACLnE,KAAK,WACL6E,YAAY,mBACZa,SAAU1D,KAAK+M,eAGjB,uBAAGjN,UAAU,aAAaE,KAAKM,MAAMiN,8BAEvC,yBAAKzN,UAAU,cACb,4BAAQA,UAAU,cAAc9B,KAAK,QAAQ4E,SAAU5C,KAAKgN,YAA5D,mB,GAhFK7M,IAAMC,WAoGZC,gBANS,SAACC,GACvB,MAAO,CACLL,YAAaK,EAAMC,KAAKN,eAIY,CAAEgN,SfhFlB,SAACO,GACvB,8CAAO,WAAOhR,GAAP,mBAAAC,EAAA,6DACCC,EAAU,IAAIC,QAAQ,SAAU,CACpCC,OAAQ,OACRC,KAAMC,KAAKC,UAAUyQ,GACrB/P,QAAS,CACPC,OAAQ,oCACR,eAAgB,sBANf,SASkBC,MAAMjB,GATxB,UAUmB,OADlBkB,EATD,QAUQC,OAVR,gBAWH7B,EAAY,wBAXT,0BAY0B,MAApB4B,EAASC,QAAsC,MAApBD,EAASC,OAZ1C,iBAaH7B,EAAY,wBAbT,2BAc0B,MAApB4B,EAASC,OAdf,iBAeH7B,EAAY,0BAfT,2BAgB0B,MAApB4B,EAASC,OAhBf,iBAiBH7B,EAAY,yBAjBT,2BAkB0B,MAApB4B,EAASC,OAlBf,iBAmBH7B,EAAY,0BAnBT,2BAoB0B,MAApB4B,EAASC,OApBf,kCAqBgBD,EAASE,OArBzB,QAqBGC,EArBH,OAsBHvB,EAAS,CAAEwB,KAAMc,EAAqBb,QAASF,IAtB5C,4CAAP,wDe+EasC,CAAuCyM,I,qBC7GhDW,GAAe,CAEnBjO,MAAO,GACPoN,SAAU,IAGNc,G,4MACJpN,MAAQmN,G,EAERV,aAAe,SAACjL,GACd,IAAMuB,EAASvB,EAAEuB,OACXpB,EAAQoB,EAAOpB,MACfE,EAAOkB,EAAOlB,KAEpB,EAAKD,SAAL,gBACGC,EAAOF,K,EAIZ+K,WAAa,SAAClL,GACZA,EAAEC,iBACF,EAAKlC,MAAM8N,MAAM,EAAKrN,Q,uDAItB,OAAIN,KAAKH,MAAMI,YACN,kBAAC,IAAD,CAAUF,GAAG,UAGpB,oCAGE,kBAAC,EAAD,MACA,yBAAKD,UAAU,0BACb,yBAAKA,UAAU,kBACb,qCACA,yBAAKoB,IAAK0M,KAAUxM,IAAI,UACxB,0BAAMwB,SAAU5C,KAAKgN,YACnB,uBAAGlN,UAAU,aAAaE,KAAKM,MAAMuN,WACrC,yBAAK/N,UAAU,cACb,2BACEqC,KAAK,QACLnE,KAAK,QACL6E,YAAY,QACZa,SAAU1D,KAAK+M,gBAGnB,yBAAKjN,UAAU,cACb,2BACEqC,KAAK,WACLnE,KAAK,WACL6E,YAAY,WACZa,SAAU1D,KAAK+M,gBAGnB,yBAAKjN,UAAU,cACb,4BAAQA,UAAU,cAAc9B,KAAK,QAAQ4E,SAAU5C,KAAKgN,YAA5D,mB,GAlDI7M,IAAMC,WAoEXC,gBALS,SAACC,GACvB,MAAO,CACLL,YAAaK,EAAMC,KAAKN,eAGY,CAAE0N,MhBPrB,SAACG,GACpB,8CAAO,WAAOtR,GAAP,mBAAAC,EAAA,6DAECC,EAAU,IAAIC,QAAQ,eAAgB,CAC1CC,OAAQ,OACRC,KAAMC,KAAKC,UAAU+Q,GACrBrQ,QAAS,CACPC,OAAQ,oCACR,eAAgB,sBAPf,SAWkBC,MAAMjB,GAXxB,UAYmB,OADlBkB,EAXD,QAYQC,OAZR,gBAaH7B,EAAY,6BAbT,0BAc0B,MAApB4B,EAASC,QAAsC,MAApBD,EAASC,OAd1C,iBAeH7B,EAAY,wBAfT,2BAgB0B,MAApB4B,EAASC,OAhBf,kCAiBgBD,EAASE,OAjBzB,QAiBGC,EAjBH,OAkBHvB,EAAS,CAAEwB,KAAMc,EAAqBb,QAASF,IAlB5C,4CAAP,wDgBMasC,CAAoCqN,IC5EpCK,G,uKAJX,OAAO,kBAAC,IAAD,CAAUhO,GAAG,e,GAFHI,IAAMC,WCKrB4N,I,qLAKF,IAAM/N,EAAcD,KAAKH,MAAMI,YAE/B,OACE,yBAAKH,UAAU,kBACb,kBAAC,IAAD,CAAMC,GAAG,SACP,4BAAQD,UAAU,eAChB,uBAAGA,UAAU,qBAAqBmO,cAAY,WAGlD,yBAAKnO,UAAU,eACb,yBAAKoB,IAAKjB,EAAYkB,gBAAiBC,IAAI,aAE7C,4BACGnB,EAAYgB,WADf,IAC4BhB,EAAY+G,UAAW,KAEnD,4BAAK/G,EAAYT,Y,GApBFW,IAAMC,YA+BdC,gBALS,SAACC,GACvB,MAAO,CACLL,YAAaK,EAAMC,KAAKN,eAGY,CAAElB,eAA3BsB,CAA0C2N,IC/BnDE,I,0NAEJC,iBAAmB,SAACrM,GAClB,IAAMsM,EAAS,IAAIC,WACnBD,EAAOE,cAAcxM,EAAEuB,OAAOkL,MAAM,IAEpCH,EAAOI,UAAY,WACjB,IAAMxP,EAAK,EAAKa,MAAMI,YAAYY,IAClC,EAAKhB,MAAM4O,SAASzP,EAAIoP,EAAO1F,U,uDAIzB,IAAD,OACP,OACE,6BACE,mDACA,2BAAOvG,KAAK,kBACLnE,KAAK,OACL0F,SAAU,SAAC5B,GAAD,OAAO,EAAKqM,iBAAiBrM,W,GAlBjC3B,IAAMC,YA6BZC,gBALS,SAACC,GACvB,MAAO,CACLL,YAAaK,EAAMC,KAAKN,eAGY,CAAEwO,SClClB,SAACzP,EAAI0P,GAE3B,8CAAO,WAAOlS,GAAP,mBAAAC,EAAA,6DAGCC,EAAU,IAAIC,QADR,gBAAkBqC,EACG,CAC7BpC,OAAQ,OACRC,KAAMC,KAAKC,UAAU,CAACgB,KAAM2Q,IAC5BjR,QAAS,CACP,eAAgB,sBAPjB,SAWkBE,MAAMjB,GAXxB,UAYkB,OADjBkB,EAXD,QAYOC,OAZP,iCAagBD,EAASE,OAbzB,OAaGC,EAbH,OAcHvB,EAAS,CAAEwB,KAAM,kBAAmBC,QAASF,IAC7CnC,EAAc,2BAfX,wBAiBHI,EAAY,oCAjBT,4CAAP,wDDgCaqE,CAAuC6N,IE5BhDS,G,kDACJ,WAAY9O,GAAQ,IAAD,8BACjB,cAAMA,IASRmN,WAAa,SAAClL,GACZA,EAAEC,iBACF,EAAKlC,MAAM+O,WAAW,EAAK/O,MAAMI,YAAYY,IAAK,EAAKP,QAZtC,EAenByM,aAAe,SAACjL,GACd,IAAMuB,EAASvB,EAAEuB,OACXlB,EAAOkB,EAAOlB,KACdF,EAAQoB,EAAOpB,MAErB,EAAKC,SAAL,gBACGC,EAAOF,KAnBV,EAAK3B,MAAQ,CACXW,WAAY,GACZ+F,UAAW,GACXxH,MAAO,GACPoN,SAAU,IANK,E,qDA0BjB,IAAM3M,EAAcD,KAAKH,MAAMI,YAC/B,OACE,yBAAKH,UAAS,2BAAsBE,KAAKH,MAAMgP,aAC5C7O,KAAKH,MAAMgP,WAAa,qCAAQ,kDAGjC,0BAAM/O,UAAU,cAAc8C,SAAU5C,KAAKgN,YAC3C,yBAAKlN,UAAU,0BACb,6CACA,2BACEqC,KAAK,aACLnE,KAAK,OACL6E,YAAa5C,EAAYgB,WACzByC,SAAU1D,KAAK+M,gBAKnB,yBAAKjN,UAAU,0BACb,4CACA,2BACEqC,KAAK,YACLnE,KAAK,OACL6E,YAAa5C,EAAY+G,UACzBtD,SAAU1D,KAAK+M,gBAKnB,yBAAKjN,UAAU,0BACb,wCACA,2BACEqC,KAAK,QACLnE,KAAK,QACL6E,YAAa5C,EAAYT,MACzBkE,SAAU1D,KAAK+M,gBAKnB,yBAAKjN,UAAU,0BACb,2CACA,2BACEqC,KAAK,WACLnE,KAAK,WACL6E,YAAY,WACZa,SAAU1D,KAAK+M,gBAKnB,yBAAKjN,UAAU,0BACb,kBAAC,GAAD,OAGF,yBAAKA,UAAU,0BACb,4BACEA,UAAU,gBACV9B,KAAK,QACL4E,SAAU5C,KAAKgN,YAHjB,sB,GAnFiB7M,IAAMC,WAuGpBC,gBANS,SAACC,GACvB,MAAO,CACLL,YAAaK,EAAMC,KAAKN,eAIY,CAAElB,cAAa6P,WrBC7B,SAAC5P,EAAI8P,GAC7B,8CAAO,WAAOtS,GAAP,mBAAAC,EAAA,6DAECC,EAAU,IAAIC,QADR,UAAYqC,EACS,CAC/BpC,OAAQ,QACRC,KAAMC,KAAKC,UAAU+R,GACrBrR,QAAS,CACPC,OAAQ,oCACR,eAAgB,sBAPf,SAUkBC,MAAMjB,GAVxB,UAWmB,OADlBkB,EAVD,QAWQC,OAXR,gBAYH7B,EAAY,kDAZT,0BAa0B,MAApB4B,EAASC,QAAsC,MAApBD,EAASC,OAb1C,iBAcH7B,EAAY,wBAdT,2BAe0B,MAApB4B,EAASC,OAff,kCAgBgBD,EAASE,OAhBzB,QAgBGC,EAhBH,OAiBHvB,EAAS,CAAEwB,KAAMc,EAA2Bb,QAASF,IACrDnC,EAAc,+BAlBX,4CAAP,wDqBFayE,CACbsO,ICzGII,G,uKAEF,IAAM9O,EAAcD,KAAKH,MAAMI,YAC/B,OAAoB,OAAhBA,EACK,kBAAC,IAAD,CAAUF,GAAG,YAEW,IAAtBE,EAAYc,MACd,kBAAC,IAAD,CAAUhB,GAAG,WAKlB,yBAAKD,UAAU,+BACb,kBAAC,GAAD,MACA,yBAAKA,UAAU,yBACb,kBAAC,GAAD,Y,GAfWK,IAAMC,WA8BdC,gBANS,SAACC,GACvB,MAAO,CACLL,YAAaK,EAAMC,KAAKN,eAIY,CAAElB,eAA3BsB,CAA0C0O,I,UCO1CC,I,mNAxCb1O,MAAQ,CAAE2O,cAAe,I,EAEzBC,kBAAoB,SAACpN,GACnB,EAAKI,SAAS,CACZ+M,cAAenN,EAAEuB,OAAOpB,S,EAI5BkN,aAAe,SAACrN,GACdA,EAAEC,iBACF,EAAKlC,MAAMN,YAAY,EAAKe,MAAM2O,eAClC,EAAK/M,SAAS,CAAE+M,cAAe,M,uDAGvB,IAAD,OACP,OACE,yBAAKnP,UAAU,mBACb,0BAAMA,UAAU,mBACd,2BAAOA,UAAU,oBAAjB,wBAEA,2BACE9B,KAAK,OACLmE,KAAK,OACLF,MAAOjC,KAAKM,MAAM2O,cAClBpM,YAAY,2BACZa,SAAU,SAAC5B,GAAD,OAAO,EAAKoN,kBAAkBpN,MAE1C,4BACEhC,UAAU,gBACV9B,KAAK,SACLkC,QAAS,SAAC4B,GAAD,OAAO,EAAKqN,aAAarN,KAHpC,iB,GA5BgB3B,IAAMC,YCwFjBgP,G,4MArFb9O,MAAQ,CACNZ,MAAO,I,EAWT2P,mB,uCAAqB,WAAO1N,GAAP,eAAAlF,EAAA,0DACfkF,EAAKZ,MADU,gBAEjB/E,EAAY,uBAFK,sCAIGsD,EAAWqC,EAAKd,KAJnB,QAIXnB,EAJW,SAMf,EAAKwC,SAAS,CACZxC,MAAOA,IAPM,2C,wDAarBH,Y,uCAAc,WAAO0P,GAAP,eAAAxS,EAAA,sEACQ8C,EAAY0P,GADpB,QACNvP,EADM,SAGV,EAAKwC,SAAS,CAAExC,MAAOA,IAHb,2C,wHArBO,IAAD,OAClBT,IAAcE,MAAK,SAACO,GAClB,EAAKwC,SAAS,CACZxC,MAAOA,S,oCAyBE,IAAD,OACZ,OAAOM,KAAKM,MAAMZ,MAAM+C,KAAI,SAACd,GAC3B,OACE,wBAAI7B,UAAU,WAAW6C,IAAKhB,EAAKd,KACjC,4BAAKc,EAAKZ,MAAQ,MAAQ,MAC1B,4BACGY,EAAKV,WADR,IACqBU,EAAKqF,WAE1B,4BAAKrF,EAAKnC,OACV,4BAAKmC,EAAK2N,QACV,4BACE,4BAAQxP,UAAU,eAChB,uBACEA,UAAU,eACVI,QAAS,kBAAM,EAAKmP,mBAAmB1N,c,+BASnD,OACE,oCACE,kBAAC,GAAD,CAAapC,YAAaS,KAAKT,cAC/B,2BAAOO,UAAU,mBACf,+BACE,wBAAId,GAAG,qBACL,wBAAIc,UAAU,cAAcyP,MAAM,OAAlC,SAGA,wBAAIzP,UAAU,WAAW0P,MAAM,OAA/B,QAGA,wBAAI1P,UAAU,YAAY0P,MAAM,OAAhC,SAGA,wBAAI1P,UAAU,aAAa0P,MAAM,OAAjC,UAGA,wBAAI1P,UAAU,aAAa0P,MAAM,OAAjC,iBAKJ,+BAAQxP,KAAKyP,qB,GA/ECtP,IAAMC,WCiDfsP,G,4MAhDbpP,MAAQ,CACNqP,UAAW,EACXC,uBAAwB,EACxBC,qBAAsB,G,kEAItB7P,KAAK8P,kBACL9P,KAAK+P,gB,wKAImBtQ,I,OAAlBkQ,E,OAEN3P,KAAKkC,SAAS,CACZyN,c,4QAKmCjR,I,cAA/BkR,E,gBAC6BhR,I,OAA7BiR,E,OAEN7P,KAAKkC,SAAS,CACZ0N,yBACAC,yB,qIAKF,OACE,yBAAK/P,UAAU,kBACb,wBAAIA,UAAU,aACZ,wBAAIA,UAAU,gBAAd,0BACyB,2BAAIE,KAAKM,MAAMqP,YAExC,wBAAI7P,UAAU,gBAAd,+BAC8B,2BAAIE,KAAKM,MAAMsP,yBAE7C,wBAAI9P,UAAU,gBAAd,wCACuC,2BAAIE,KAAKM,MAAMuP,6B,GA1CzC1P,IAAMC,WCsFdC,gBALS,SAACC,GACvB,MAAO,CACLL,YAAaK,EAAMC,KAAKN,eAGY,CAAElB,eAA3BsB,EA9EO,SAACR,GACrB,IAAMmQ,EAAe,CACnBC,WAAY,aACZC,UAAW,YACXC,YAAa,eAJgB,EAOOC,mBAASJ,EAAaC,YAP7B,oBAOxBI,EAPwB,KAOXC,EAPW,KAQ3BC,EAAiB,KAErB,OAAQF,GACN,KAAKL,EAAaQ,aAChBD,EAAiBvB,GACjB,MACF,KAAKgB,EAAaC,WAChBM,EAAiBnB,GACjB,MACF,KAAKY,EAAaE,UAChBK,EAAiBb,GACjB,MACF,KAAKM,EAAaG,YAChBI,EAAiB5B,GAMrB,IAAM1O,EAAcJ,EAAMI,YAC1B,OAAoB,OAAhBA,EACK,kBAAC,IAAD,CAAUF,GAAG,WACVE,EAAYc,MAKtB,yBAAKjB,UAAU,4BACb,kBAAC,GAAD,MACA,yBAAKA,UAAU,mBACb,yBAAKA,UAAU,0BACb,gDAEF,yBAAKA,UAAU,iBACb,4BACEA,UAAS,oBACPuQ,IAAgBL,EAAaC,WAAa,SAAW,IAEvD/P,QAAS,kBAAMoQ,EAAeN,EAAaC,cAJ7C,cAQA,4BACEnQ,UAAS,qBACPuQ,IAAgBL,EAAaE,UAAY,SAAW,IAEtDhQ,QAAS,kBAAMoQ,EAAeN,EAAaE,aAJ7C,aAQA,4BACEpQ,UAAS,oBACPuQ,IAAgBL,EAAaG,YAAc,SAAW,IAExDjQ,QAAS,kBAAMoQ,EAAeN,EAAaG,eAJ7C,sBASF,yBAAKrQ,UAAU,WAAWuQ,GAAe,kBAACE,EAAD,SApCtC,kBAAC,IAAD,CAAUxQ,GAAG,iBC1BlB0Q,G,kDACJ,WAAY5Q,GAAQ,IAAD,8BACjB,cAAMA,IACDA,MAAM6Q,aAFM,E,kGAOT,IAAD,OACP,OACE,oCACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,IAAIC,OAAK,EAACC,UAAW,kBAAM,kBAAC,EAAD,SACvC,kBAAC,IAAD,CAAOF,KAAK,QAAQE,UAAW,kBAAM,kBAAC,GAAD,SACrC,kBAAC,IAAD,CAAOD,OAAK,EAACD,KAAK,UAAUE,UAAW,kBAAM,kBAAC,GAAD,SAC7C,kBAAC,IAAD,CAAOD,OAAK,EAACD,KAAK,SAASE,UAAW,kBAAM,kBAAC,GAAD,SAC5C,kBAAC,IAAD,CAAOD,OAAK,EAACD,KAAK,YAAYE,UAAW,kBAAM,kBAAC,GAAD,SAC/C,kBAAC,IAAD,CAAOD,OAAK,EAACD,KAAK,SAASE,UAAW,kBAAM,kBAAC,GAAD,SAC5C,kBAAC,IAAD,CACED,OAAK,EACLD,KAAK,UACLE,UAAW,kBAAM,kBAAC,GAAD,CAAQC,YAAa,EAAKxQ,aAIjD,kBAAC,IAAD,W,GA1BUH,IAAMC,WAgCTC,eAAQ,KAAM,CAAEqQ,W3B/BL,WACxB,8CAAO,WAAOlU,GAAP,iBAAAC,EAAA,4DACO,uBADP,SAEkBkB,MADX,wBADP,UAGmB,OADlBC,EAFD,QAGQC,OAHR,gCAIgBD,EAASE,OAJzB,OAIGC,EAJH,OAKHvB,EAAS,CAAEwB,KAAMc,EAA0Bb,QAASF,IALjD,2CAAP,wD2B8BasC,CAA8BoQ,IChDvCM,GAAgB,CACpB9Q,YAAa,MCDT8Q,GAAgB,CACpBvS,MAAO,MCCMwS,eAAgB,CAC7BzQ,KFCa,WAAoC,IAAnCD,EAAkC,uDAA1ByQ,GAAeE,EAAW,uCAChD,OAAQA,EAAOjT,MACb,KAAKc,EAKL,KAAKA,EACH,OAAO,6BACFwB,GADL,IAEEL,YAAagR,EAAOhT,QAAQgC,cAEhC,KAAKnB,EACH,OAAO,6BACFwB,GADL,IAEEL,YAAa,OAEjB,KAAKnB,EAKL,KAAKA,EAKL,KAAKA,EAKL,KAAKA,EAKL,KAAKA,EACH,OAAO,6BACFwB,GADL,IAEEL,YAAagR,EAAOhT,QAAQgC,cAEhC,QACE,OAAOK,IE3CX9B,MDAa,WAAoC,IAAnC8B,EAAkC,uDAA1ByQ,GAAeE,EAAW,uCAChD,OAAQA,EAAOjT,MACb,KAAK5B,EAKL,KAAKA,EAKL,KAAKA,EAKL,KAAKA,EAKL,KAAKA,EAKL,KAAKA,EACH,OAAO,6BACFkE,GADL,IAEE9B,MAAOyS,EAAOhT,UAElB,QACE,OAAOqC,ME7BP4Q,GAAmBlJ,OAAOmJ,sCAAwCC,IAClEC,GAAQC,YACZC,GACAL,GAAiBM,YAAgBC,OAEnCC,IAASC,OACP,kBAAC,IAAD,CAAUN,MAAOA,IACf,kBAAC,GAAD,OAEFO,SAASC,eAAe,U","file":"static/js/main.c5e7feaf.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/signup.4203b4a3.svg\";","module.exports = __webpack_public_path__ + \"static/media/login.f48976d4.svg\";","import { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\n\nexport const notifyDef = (msg) => toast(msg); //White toast\nexport const notifyWarn = (msg) => toast.warn(msg); //Yellow toast\nexport const notifySuccess = (msg) => toast.success(msg); //Green toast\nexport const notifyError = (msg) => toast.error(msg); //Red toast\nexport const notifyInfo = (msg) => toast.info(msg); // Blue toast\nexport const notifyDark = (msg) => toast.dark(msg); // Black toast\n","import { notifySuccess, notifyError } from \"../Utils/notificationUtils\";\n\nexport const TL_PAYLOAD_TYPES = {\n  FILTER_POSTS: \"FILTER_POSTS\",\n  GET_POSTS: \"GET_POSTS\",\n  EDIT_POST: \"EDIT_POST\",\n  ACCEPT_POST: \"ACCEPT_POST\",\n  DELETE_POST: \"DELETE_POST\",\n  CREATE_POST: \"CREATE_POST\",\n  GET_USER_POSTS: \"GET_USER_POSTS\",\n};\n\n/* \n\nALL THE FUNCTIONS BEING EXPORTED IN THIS FILE REQUIRE SERVER CALLS.\nFOR NOW, THEY SIMPLY MODIFY THE FEED STATE IN THE FEED COMPONENT.\n\n*/\n\nexport const getPosts = () => {\n  return async (dispatch) => {\n    const request = new Request(\"/posts\", {\n      method: \"get\",\n      headers: {\n        Accept: \"application/json, text/plain, */*\",\n        \"Content-Type\": \"application/json\",\n      },\n    });\n    const response = await fetch(request);\n    if (response.status === 200) {\n      const data = await response.json();\n      dispatch({ type: TL_PAYLOAD_TYPES.GET_POSTS, payload: data });\n    } else {\n      notifyError(\"Something went wrong, couldn't load posts\");\n    }\n  };\n};\n\n/*\n\nAction creator to send a request to create a post to the server\n\nArguments:\n  - posts_state: The current state of the timeline in the application\n  - new_post: The post being added\n\n  Response is the new list of posts that are not completed\n\n*/\n\nexport const createPost = (new_post, currentUserID) => {\n  return async (dispatch) => {\n    const request = new Request(\"/posts\", {\n      method: \"post\",\n      body: JSON.stringify({ post: new_post, user: currentUserID }),\n      headers: {\n        Accept: \"application/json, text/plain, */*\",\n        \"Content-Type\": \"application/json\",\n      },\n    });\n    const response = await fetch(request);\n    if (response.status === 200) {\n      const data = await response.json();\n      dispatch({ type: TL_PAYLOAD_TYPES.CREATE_POST, payload: data });\n      notifySuccess(\"Your request has been created.\");\n    } else {\n      notifyError(\"Something went wrong creating your request.\");\n    }\n  };\n};\n\n/*\n\nAction creator to send a request to delete a post to the server\n\nArguments:\n  - currentUserID: The current user's id\n  - id: The id of the post to be deleted\n\n  Response is the new list of posts that are not completed\n\n*/\nexport const deletePost = (id, currentUserID) => {\n  return async (dispatch) => {\n    const request = new Request(`/posts`, {\n      method: \"delete\",\n      body: JSON.stringify({ post: id, user: currentUserID }),\n      headers: {\n        Accept: \"application/json, text/plain, */*\",\n        \"Content-Type\": \"application/json\",\n      },\n    });\n    const response = await fetch(request);\n    if (response.status === 200) {\n      const data = await response.json();\n      dispatch({ type: TL_PAYLOAD_TYPES.DELETE_POST, payload: data });\n      notifySuccess(\"Request successfully deleted\");\n    } else if (response.status === 400) {\n      notifyError(\"You cannot delete that request\");\n    } else {\n      notifyError(\"Something went wrong deleting the request\");\n    }\n  };\n};\n\n/*\n\nAction creator to send a request to the server to edit a post\n\nArguments:\n  - currentUserID: The current user's id\n  - postID: The id of the post being modified\n  - editedPost: The updated post\n\n  Response is the new list of posts that are not completed\n\n*/\n\nexport const editPost = (postID, editedPost, currentUserID) => {\n  return async (dispatch) => {\n    const request = new Request(`/posts/${postID}`, {\n      method: \"put\",\n      body: JSON.stringify({ post: editedPost, user: currentUserID }),\n      headers: {\n        Accept: \"application/json, text/plain, */*\",\n        \"Content-Type\": \"application/json\",\n      },\n    });\n    const response = await fetch(request);\n    if (response.status === 200) {\n      const data = await response.json();\n      dispatch({ type: TL_PAYLOAD_TYPES.EDIT_POST, payload: data });\n      notifySuccess(\"Request successfully edited\");\n    } else if (response.status === 400) {\n      notifyError(\"You are not allowed to do that\");\n    } else {\n      notifyError(\"Something went wrong editing the request\");\n    }\n  };\n};\n\n/*\n\nFilter posts in the timeline\n\nArguments:\n  - filter: Filter attributes\n  - currentUserId: the users currentId\n  - currentUserLocation: The current location of the user\n*/\n\nexport const filterPosts = (filter, currentUserLocation) => {\n  return async (dispatch) => {\n    const request = new Request(`/posts/filter`, {\n      method: \"put\",\n      body: JSON.stringify({\n        distance: filter.filterDistance,\n        size: filter.filterSize,\n        reimbursement: filter.filterPayment,\n        currLocation: {\n          latitude: currentUserLocation.latitude,\n          longitude: currentUserLocation.longitude,\n        },\n      }),\n      headers: {\n        Accept: \"application/json, text/plain, */*\",\n        \"Content-Type\": \"application/json\",\n      },\n    });\n    const response = await fetch(request);\n    if (response.status === 200) {\n      const data = await response.json();\n      dispatch({ type: TL_PAYLOAD_TYPES.FILTER_POSTS, payload: data });\n    }\n  };\n};\n\n/*\n\nGet the size estimate of a favor\n\nSmall favor <= 3 items\nMedium favor  3 <  items <= 8 \nLarge favor <= 8 items\n\nArguments:\n  - post: The post that we are calculating the size of\n\n  This will be replaced by a call to the database to add the user\n\n*/\nexport const getSizeEstimate = (post) => {\n  return sizeEstimate(post);\n};\n\n/*\n\nHelper function to calculate size\n\nArguments:\n  - post: The post that we are calculating the size of\n\n*/\nconst sizeEstimate = (post) => {\n  let size = null;\n  if (post.items.length <= 3) {\n    size = \"Small\";\n  } else if (post.items.length <= 8) {\n    size = \"Medium\";\n  } else {\n    size = \"Large\";\n  }\n  return size;\n};\n\nexport const getNumPostsByUserId = async (id) => {\n  const url = `/posts/users/${id}`;\n  const request = new Request(url, {\n    method: \"get\",\n    headers: {\n      Accept: \"application/json, text/plain, */*\",\n      \"Content-Type\": \"application/json\",\n    },\n  });\n  const response = await fetch(request);\n  if (response.status === 200) {\n    const data = await response.json();\n    return data;\n  } else {\n    notifyError(\"Something went wrong, couldn't user posts\");\n  }\n};\n\nexport const getCompletedPosts = async () => {\n  const request = new Request(\"/posts/completed\", {\n    method: \"get\",\n    headers: {\n      Accept: \"application/json, text/plain, */*\",\n      \"Content-Type\": \"application/json\",\n    },\n  });\n\n  const response = await fetch(request);\n  if (response.status === 200) {\n    const posts = await response.json();\n    return posts;\n  } else {\n    notifyError(\"Unable to get completed posts\")\n  }\n};\n\nexport const getPendingPosts = async () => {\n  const request = new Request(\"/posts/pending\", {\n    method: \"get\",\n    headers: {\n      Accept: \"application/json, text/plain, */*\",\n      \"Content-Type\": \"application/json\",\n    },\n  });\n\n  const response = await fetch(request);\n  if (response.status === 200) {\n    const posts = await response.json();\n    return posts;\n  } else {\n    notifyError(\"Unable to get pending posts\");\n  }\n};\n\nexport const getNumCompletedPosts = async () => {\n  const completedPosts = await getCompletedPosts();\n  return completedPosts.length\n}\n\nexport const getNumPendingPosts = async () => {\n  const pendingPosts = await getPendingPosts();\n  return pendingPosts.length\n}","import { notifySuccess, notifyError } from \"../Utils/notificationUtils\";\nimport { TL_PAYLOAD_TYPES } from \"./timeline\";\n\nexport const PAYLOAD_TYPES = {\n  REGISTER: \"REGISTER\",\n  LOGIN: \"LOGIN\",\n  LOGOUT: \"LOGOUT\",\n  UPDATE_USER: \"UPDATE_USER\",\n  DELETE_USER: \"DELETE_USER\",\n  SET_COOKIE: \"SET_COOKIE\",\n  SET_PROFILE_PIC: \"SET_PROFILE_PIC\",\n  ACCEPT_POST: \"ACCEPT_POST\",\n  COMPLETE_POST: \"COMPLETE_POST\",\n};\n\n\n/*\n  Function to read cookie\n*/\nexport const readCookie = () => {\n  return async (dispatch) => {\n    const url = \"/users/check-session\";\n    const response = await fetch(url);\n    if (response.status === 200) {\n      const data = await response.json();\n      dispatch({ type: PAYLOAD_TYPES.SET_COOKIE, payload: data });\n    }\n  };\n};\n\n/*\n\nAdd a user to the database\n\nArguments:\n  - signupComp: The object containing the user's sign up information\n\nResponse is the new user object created\n*/\n\nexport const register = (signupComp) => {\n  return async (dispatch) => {\n    const request = new Request(\"/users\", {\n      method: \"post\",\n      body: JSON.stringify(signupComp),\n      headers: {\n        Accept: \"application/json, text/plain, */*\",\n        \"Content-Type\": \"application/json\",\n      },\n    });\n    const response = await fetch(request);\n    if (response.status === 400) {\n      notifyError(\"Something went wrong\");\n    } else if (response.status === 500 || response.status === 404) {\n      notifyError(\"Something went wrong\");\n    } else if (response.status === 417) {\n      notifyError(\"Passwords do not match\");\n    } else if (response.status === 418) {\n      notifyError(\"Last name is required\");\n    } else if (response.status === 419) {\n      notifyError(\"First name is required\");\n    } else if (response.status === 200) {\n      const data = await response.json();\n      dispatch({ type: PAYLOAD_TYPES.LOGIN, payload: data });\n    }\n  };\n};\n/*\n\nLog in a given user\n\nArguments:\n  - loginComp: The login credentials provided by the user\n\nResponse is the user object if successfully logged in\n\n*/\n\nexport const login = (loginComp) => {\n  return async (dispatch) => {\n    // Create our request constructor with all the parameters we need\n    const request = new Request(\"/users/login\", {\n      method: \"post\",\n      body: JSON.stringify(loginComp),\n      headers: {\n        Accept: \"application/json, text/plain, */*\",\n        \"Content-Type\": \"application/json\",\n      },\n    });\n    // Send the request with fetch()\n    const response = await fetch(request);\n    if (response.status === 400) {\n      notifyError(\"Invalid login credentials\");\n    } else if (response.status === 500 || response.status === 404) {\n      notifyError(\"Something went wrong\");\n    } else if (response.status === 200) {\n      const data = await response.json();\n      dispatch({ type: PAYLOAD_TYPES.LOGIN, payload: data });\n    }\n  };\n};\n\n/*\n\nAction creator to update the user. \n\nArguments:\n  - id: The id of the user to be updated\n  - updateComp: The state of the updated user\n\nResponse is the updated user object\n*/\n\nexport const updateUser = (id, updateComp) => {\n  return async (dispatch) => {\n    const url = \"/users/\" + id;\n    const request = new Request(url, {\n      method: \"PATCH\",\n      body: JSON.stringify(updateComp),\n      headers: {\n        Accept: \"application/json, text/plain, */*\",\n        \"Content-Type\": \"application/json\",\n      },\n    });\n    const response = await fetch(request);\n    if (response.status === 400) {\n      notifyError(\"Profile not updated due to invalid information\");\n    } else if (response.status === 500 || response.status === 404) {\n      notifyError(\"Something went wrong\");\n    } else if (response.status === 200) {\n      const data = await response.json();\n      dispatch({ type: PAYLOAD_TYPES.UPDATE_USER, payload: data });\n      notifySuccess(\"Profile succesfully updated\");\n    }\n  };\n};\n\n/*\n\nGet a the user in the database.\n\nArguments:\n    - id: The id of the user to fetch\n*/\n\nexport const getUserById = async (id) => {\n  const url = \"/users/\" + id;\n  const request = new Request(url, {\n    method: \"get\",\n    headers: {\n      Accept: \"application/json, text/plain, */*\",\n      \"Content-Type\": \"application/json\",\n    },\n  });\n  // Send the request with fetch()\n  const response = await fetch(request);\n  if (response.status !== 200) {\n    notifyError(\"Internal server error - couldn't find user\");\n  } else {\n    const data = await response.json();\n    return data;\n  }\n};\n\n/*\n\nGet all the users in the database. Used in admin view.\n\n*/\n\nexport const getAllUsers = async () => {\n  const url = \"/users\";\n  const request = new Request(url, {\n    method: \"get\",\n    headers: {\n      Accept: \"application/json, text/plain, */*\",\n      \"Content-Type\": \"application/json\",\n    },\n  });\n  const response = await fetch(request);\n  if (response.status === 200) {\n    const data = await response.json();\n    return data;\n  } else {\n    notifyError(\"Something went wrong while getting users data\");\n  }\n};\n\n/*\n\nLog out the currently logged in user\n\n*/\n\nexport const logout = () => {\n  return async (dispatch) => {\n    const url = \"/users/logout\";\n    fetch(url)\n      .then((res) => {\n        dispatch({ type: PAYLOAD_TYPES.LOGOUT });\n      })\n      .catch((error) => {\n        notifyError(\"Could not log out\");\n      });\n  };\n};\n\n/*\n\nDelete the user corresponding to the given id.\n\nArguments:\n  - id: The id of the user to delete\n\n  Response is the new list of users to update the state of the component\n\n\n*/\n\nexport const deleteUser = async (id) => {\n  const url = \"/users/\" + id;\n  const request = new Request(url, {\n    method: \"delete\",\n    headers: {\n      Accept: \"application/json, text/plain, */*\",\n      \"Content-Type\": \"application/json\",\n    },\n  });\n\n  // Send the request with fetch()\n  const response = await fetch(request);\n  if (response.status === 200) {\n    notifySuccess(\"User has been deleted\");\n    const data = await response.json();\n    return data;\n  } else {\n    notifyError(\"Something went wrong deleting the user\");\n  }\n};\n\n/*\n\nPromote the user corresponding to the given email to admin role. If email\ndoes not exist in the state, notify the user and do nothing\n\nArguments:\n  - email: The email of the user to make admin\n\n  Response is the new list of users to update the state of the component\n\n*/\n\nexport const promoteUser = async (email) => {\n  const url = \"/users\";\n  const request = new Request(url, {\n    method: \"put\",\n    body: JSON.stringify({ email: email }),\n    headers: {\n      Accept: \"application/json, text/plain, */*\",\n      \"Content-Type\": \"application/json\",\n    },\n  });\n  const response = await fetch(request);\n  if (response.status === 200) {\n    const data = await response.json();\n    return data;\n  } else if (response.status === 404) {\n    notifyError(\"Email was not found\");\n  } else if (response.status === 400) {\n    notifySuccess(\"User is already an admin!\");\n  } else {\n    notifyError(\"Internal Error\");\n  }\n};\n\n/*\n\nAccept a request action creator\n\nArguments:\n  - post: The id of the post to accept\n  - user: The current user's id\n\n  Response is the updated current user with an active post\n\n*/\nexport const acceptPost = (post, user) => {\n  return async (dispatch) => {\n    const request = new Request(`/posts/accept/${post}`, {\n      method: \"put\",\n      body: JSON.stringify({ user: user }),\n      headers: {\n        Accept: \"application/json, text/plain, */*\",\n        \"Content-Type\": \"application/json\",\n      },\n    });\n    const response = await fetch(request);\n    if (response.status === 200) {\n      const data = await response.json();\n      dispatch({ type: PAYLOAD_TYPES.ACCEPT_POST, payload: data });\n      notifySuccess(\"Request accepted\");\n    } else {\n      notifyError(\"Something went wrong accepting this request\");\n    }\n  };\n};\n\nexport const completePost = (post, user) => {\n  return async (dispatch) => {\n    const request = new Request(`/posts/complete/${post}`, {\n      method: \"put\",\n      body: JSON.stringify({ user: user }),\n      headers: {\n        Accept: \"application/json, text/plain, */*\",\n        \"Content-Type\": \"application/json\",\n      },\n    });\n    const response = await fetch(request);\n    if (response.status === 200) {\n      const data = await response.json();\n      dispatch({ type: PAYLOAD_TYPES.COMPLETE_POST, payload: data });\n      dispatch({ type: TL_PAYLOAD_TYPES.GET_POSTS, payload: data.posts });\n      notifySuccess(\"Request completed.\");\n    } else {\n      notifyError(\"Something went wrong completing this request\");\n    }\n  };\n};\n\nexport const getNumUsers = async () => {\n  const users = await getAllUsers();\n  return users.length\n\n}\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport { logout } from \"../../actions/user\";\n\nclass NavbarLinks extends React.Component {\n  /* This function handles the situation where the user clicks log out */\n  handleUserLogout = () => {\n    this.props.logout();\n  };\n  render() {\n    return (\n      <ul className=\"navbar-links\">\n        <li>\n          <Link to=\"/\">Home</Link>\n        </li>\n\n        {!this.props.currentUser && (\n          <li>\n            <Link to=\"/login\">Login</Link>\n          </li>\n        )}\n\n        {!this.props.currentUser && (\n          <li>\n            <Link to=\"/signup\">Signup</Link>\n          </li>\n        )}\n\n        {this.props.currentUser && (\n          <li>\n            <Link to=\"/feed\">Feed</Link>\n          </li>\n        )}\n\n        {this.props.currentUser && (\n          <li onClick={this.handleUserLogout}>\n            <Link>Logout</Link>\n          </li>\n        )}\n      </ul>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    currentUser: state.auth.currentUser,\n  };\n};\n\nexport default connect(mapStateToProps, { logout })(NavbarLinks);\n","import React from \"react\";\nimport NavbarLinks from \"./NavbarLinks\";\n\nclass Navbar extends React.Component {\n\n  render() {\n    return (\n      <nav className=\"navbar\" id={this.props.id} >\n        <h2>The Good Neighbour</h2>\n        <NavbarLinks currentUser={this.props.currentUser} />\n      </nav>\n    );\n  }\n}\n\nexport default Navbar;\n","import React from \"react\";\nimport Navbar from \"../Navigation/Navbar\";\nimport \"../../stylesheets/home.css\";\nimport \"../../stylesheets/shared.css\";\n\nclass Home extends React.Component {\n  render() {\n    return (\n\n      <>\n        <Navbar />\n        <div className=\"home-container\">\n          <div className=\"slide\">\n            <section className=\"hero\">\n              <h1>The Good Neighbour</h1>\n              <p>\n                “Because that’s what kindness is. It’s not doing something for\n                 someone else because they can’t, but because you can.\n                 <span className=\"author\"> - Andrew Iskander.</span>”\n              </p>\n              <div className=\"hero-img-container\">\n                <img className=\"hero-img\"/>\n              </div>\n\n            </section>\n\n            <section className=\"description\">\n              <div className=\"about\">\n                <h2>Who We Are?</h2>\n                <p>\n                  The Good Neighbour project is a community-based organization\n                  that aims at providing to the needs of the elderly population\n                  and those affected by COVID-19. Simply Sign-up to make requests\n                  for services such as buying groceries or food items and one of\n                  our community volunteers will be at your service. Want to give\n                  back to the community?\n              </p>\n              </div>\n              <div className=\"description-img-container\">\n                <img className=\"who-we-are-img\"/>\n              </div>\n            </section>\n\n            <section className=\"description\">\n              <div className=\"description-img-container\">\n                <img className=\"what-we-do-img\"/>\n              </div>\n              <div className=\"about\">\n                <h2>Get Involved</h2>\n                <p>\n                  The elderly population is the worst affected by COVID-19 and are\n                  most at risk of contracting the virus. Help them come through\n                  this pandemic by signing up to be a volunteer! Select and\n                  complete the requests made by their requestors and get in touch\n                  with them directly to help them out. Reimbursement for your\n                  services will be provided.\n              </p>\n              </div>\n            </section>\n          </div>\n        </div>\n      </>\n    );\n  }\n}\n\nexport default Home;","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { deletePost } from \"../../actions/timeline\";\n\nclass ViewRequest extends React.Component {\n  /* This function returns an estimate for the size of the favour given the amount of elements in the items list. */\n  sizeEstimate = () => {\n    let size = null;\n    if (this.props.post.items.length <= 3) {\n      size = \"Small\";\n    } else if (this.props.post.items.length <= 8) {\n      size = \"Medium\";\n    } else {\n      size = \"Large\";\n    }\n    return size;\n  };\n\n  /* Depending on if the current user is the author of this post, it shows the items list or just the estimate\n     If the current user is the author, it shows the items list. Otherwise shows the estimate. */\n  renderItemSizeOrList() {\n    if (\n      this.props.postUser._id === this.props.currentUser._id ||\n      this.props.currentUser.admin\n    ) {\n      return <ul className=\"request-items-list\">{this.props.renderItems()}</ul>;\n    } else {\n      return (\n        <p className=\"post-favour-size\">\n          {this.props.postUser.first_name} is asking for a {this.sizeEstimate()}{\" \"}\n          favour.\n        </p>\n      );\n    }\n  }\n\n  /* This function handles the clicking of a post to highlight it in the google maps area with in the sidebar.\n     Can only be highlighted if the post does not belong to the current user.  */\n  handlePostClick = () => {\n    if (this.props.postUser._id !== this.props.currentUser._id) {\n      this.props.highlightPost(this.props.post);\n    }\n  };\n\n  /* \n\n  ------- Render function ----------\n\n    If the current user is the author of this post, it renders an edit and delete button that allows the user\n    to edit or delete the post accordingly. \n\n    If the current user is not the author of this post, it renders an accept request button that allows the user\n    to accept this post, following their confirmation.\n\n  */\n  render() {\n    return (\n      <div\n        className={`posted-request  ${\n          this.props.postUser === this.props.currentUser._id\n            ? \"\"\n            : \"other-author\"\n        }`}\n        onClick={this.handlePostClick}\n      >\n        <div className=\"users-pic-name\">\n          <img\n            className=\"post-user-pic\"\n            src={this.props.postUser.profile_picture}\n            alt=\"profile-pic\"\n          />\n          <label className=\"post-user-title\">\n            <span className=\"post-user-name\">\n              {this.props.postUser.first_name}\n            </span>{\" \"}\n            <span className=\"post-user-payment\">\n              is paying by{\" \"}\n              <span className=\"payment-type\">\n                {this.props.post.reimbursement}\n              </span>\n            </span>\n          </label>\n          {this.props.postUser._id === this.props.currentUser._id ? (\n            <>\n              <button className=\"edit-post\" onClick={this.props.editClick}>\n                <i className=\"fas fa-pencil-alt\"></i>\n              </button>\n              <button\n                className=\"delete-post\"\n                onClick={() =>\n                  this.props.deletePost(\n                    this.props.post._id,\n                    this.props.currentUser._id\n                  )\n                }\n              >\n                <i className=\"fas fa-trash\"></i>\n              </button>\n            </>\n          ) : (\n            <>\n              <button\n                className=\"accept-request\"\n                onClick={() => this.props.showConfirmation(this.props.post)}\n              >\n                Accept Request\n              </button>\n              {this.props.currentUser.admin ? (\n                <button\n                  className=\"delete-post admin-delete-post\"\n                  onClick={() =>\n                    this.props.deletePost(\n                      this.props.post._id,\n                      this.props.currentUser._id\n                    )\n                  }\n                >\n                  <i className=\"fas fa-trash\"></i>\n                </button>\n              ) : (\n                <></>\n              )}\n            </>\n          )}\n        </div>\n        <div className=\"post-description\">\n          {this.renderItemSizeOrList()}\n          <p className=\"additional-information\">\n            <label className=\"more-info\">Additional Information</label>\n            {this.props.post.description}\n          </p>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    currentUser: state.auth.currentUser,\n  };\n};\n\nexport default connect(mapStateToProps, { deletePost })(ViewRequest);\n","import React from \"react\";\n\nclass ItemsList extends React.Component {\n  /*\n\n  ------- State Initialization ----------\n\n    items: The list of items that is to be rendered. Upon initialization, it sets this\n           list to the list value passed down as a prop from the parent component.\n\n  */\n  state = {\n    items: this.props.items,\n  };\n\n  /* Update lifecycle method required to reset the list of items upon submitting a new request */\n  componentDidUpdate() {\n    if (this.props.items.length === 0 && this.state.items.length !== 0) {\n      this.setState({ items: [] });\n    }\n  }\n\n  /* This function adds an item to the state, updates the parent's list of items, and resets the input's value */\n  addItem = (e) => {\n    e.preventDefault();\n    if (\n      this._inputElement.value !== \"\" &&\n      this._inputElement.value[0] !== \" \"\n    ) {\n      this.setState({\n        items: [...this.state.items, { name: this._inputElement.value }],\n      });\n      this.props.changeItems([\n        ...this.state.items,\n        { name: this._inputElement.value },\n      ]);\n      this._inputElement.value = \"\";\n    }\n  };\n\n  /* This function deletes an item from the state, and updates the parent's list of items */\n  deleteItem = (removeItem) => {\n    const filteredItems = this.state.items.filter((item) => {\n      return item.name !== removeItem.name;\n    });\n    this.setState({ items: filteredItems });\n    this.props.changeItems(filteredItems);\n  };\n\n  /* This function maps through the items prop and renders each item as an li, with\n     an onClick function that allows the user to delete the item if the li is clicked */\n  renderItems() {\n    return this.state.items.map((item, index) => {\n      return (\n        <li\n          key={index}\n          onClick={() => this.deleteItem(item)}\n          className=\"request-item\"\n        >\n          {item.name} <i className=\"fas fa-times\"></i>\n        </li>\n      );\n    });\n  }\n\n  /* \n  \n  ------- Render function ----------\n     \n     Renders a form which manages the items state. Upon submitting the form, it \n     adds the input value to the list.\n\n     The items are displayed using the Items component, which takes in a deleteItem\n     prop so that it can manage deleting items from this components state.\n\n  */\n  render() {\n    return (\n      <>\n        <div id=\"item-input-container\">\n          <form onSubmit={this.addItem}>\n            <button id=\"add-item-btn\" type=\"submit\">\n              Add Item\n            </button>\n            <input\n              className=\"form-new-post item-input\"\n              placeholder=\"Enter an item\"\n              ref={(input) => (this._inputElement = input)}\n            ></input>\n          </form>\n        </div>\n        <div id=\"items-list-container\">\n          <ul className=\"request-items-list\">{this.renderItems()}</ul>\n        </div>\n      </>\n    );\n  }\n}\n\nexport default ItemsList;\n","import React from \"react\";\nimport ItemsList from \"../ItemsList/ItemsList\";\n\nclass EditRequest extends React.Component {\n  /*\n\n  ------- State Initialization ----------\n\n    formReimbursement: The state that manages the reimbursement select option.\n    formDescription: The state that manages the description textarea for the new requst.\n\n    items: The state that manages all the items the users wants to add to their request.\n\n  */\n  state = {\n    formReimbursement: this.props.post.reimbursement,\n    formDescription: this.props.post.description,\n    items: this.props.post.items,\n  };\n\n  /* This function handles changes to the item list */\n  handleItemsChange = (items) => {\n    this.setState({ items: items });\n  };\n\n  /* This function handles changes to the reimbursement value */\n  handleReimbursementChange = (e) => {\n    this.setState({ formReimbursement: e.target.value });\n  };\n\n  /* This function handles changes to the description textarea */\n  handleDescriptionChange = (e) => {\n    this.setState({ formDescription: e.target.value });\n  };\n\n  /* This function is responsible for handling the save request button in the edit view\n     It creates a new post with values stored in the state, and sends it to the parent component\n     to save as the new values. */\n  handleEditRequest = (e) => {\n    e.preventDefault();\n    const newPost = {\n      reimbursement: this.state.formReimbursement,\n      items: this.state.items,\n      description: this.state.formDescription,\n    };\n    this.props.editPost(this.props.post._id, newPost);\n  };\n\n  /* This function renders the other options for the payment select to avoid duplicates */\n  renderOtherPaymentOptions() {\n    switch (this.props.post.reimbursement) {\n      case \"Cash\":\n        return (\n          <>\n            <option value=\"E-transfer\">{\"E-Transfer\"}</option>\n            <option value=\"Cheque\">{\"Cheque\"}</option>\n          </>\n        );\n      case \"E-transfer\":\n        return (\n          <>\n            <option value=\"Cash\">{\"Cash\"}</option>\n            <option value=\"Cheque\">{\"Cheque\"}</option>\n          </>\n        );\n      case \"Cheque\":\n        return (\n          <>\n            <option value=\"Cash\">{\"Cash\"}</option>\n            <option value=\"E-transfer\">{\"E-Transfer\"}</option>\n          </>\n        );\n      default:\n        return <></>;\n    }\n  }\n\n  /* \n\n  ------- Render function ----------\n\n    Renders the select option where the payment is specified to allow the user to pick a new payment type.\n    Renders the ItemsList component to manage the item list for this request and also renders a text area,\n    allowing the user to change their description of their request.\n\n  */\n  render() {\n    return (\n      <div className=\"posted-request\">\n        <div className=\"users-pic-name\">\n          <img\n            className=\"post-user-pic\"\n            src={this.props.postUser.profile_picture}\n            alt=\"profile-pic\"\n          />\n          <label className=\"post-user-title\">\n            <span className=\"post-user-name\">\n              {this.props.postUser.first_name}\n            </span>{\" \"}\n            <span className=\"post-user-payment\">is paying by</span>\n          </label>\n          <select\n            id=\"edit-payment-select\"\n            className=\"form-new-post pay-select\"\n            onChange={(e) => this.handleReimbursementChange(e)}\n          >\n            <option selected value={this.props.post.reimbursement}>\n              {this.props.post.reimbursement}\n            </option>\n            {this.renderOtherPaymentOptions()}\n          </select>\n          <button className=\"post-edit-save\" onClick={this.handleEditRequest}>\n            <i className=\"fas fa-check\"></i>\n          </button>\n          <button className=\"post-edit-cancel\" onClick={this.props.exitEdit}>\n            <i className=\"fas fa-times\"></i>\n          </button>\n        </div>\n        <div id=\"edit-item-list\">\n          <ItemsList\n            changeItems={this.handleItemsChange}\n            items={this.state.items}\n          />\n        </div>\n        <div id=\"edit-post-description\">\n          <label className=\"more-info\">Additional Information</label>\n          <textarea\n            value={this.state.formDescription}\n            className=\"new-post-description\"\n            placeholder=\"Add more information here...\"\n            onChange={this.handleDescriptionChange}\n            rows=\"5\"\n          ></textarea>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default EditRequest;\n","import React from \"react\";\nimport ViewRequest from \"./ViewRequest\";\nimport EditRequest from \"./EditRequest\";\nimport { connect } from \"react-redux\";\nimport \"../../stylesheets/request.css\";\n\nimport { editPost } from \"../../actions/timeline\";\n\nclass Request extends React.Component {\n  /*\n\n  ------- State Initialization ----------\n\n    postUser: This stores the author of the post passed down by the parent component\n    editState: This state manages whether the user is in an edit state or view state for this post.\n\n  */\n  state = { postUser: this.props.post.author, editState: false };\n\n  /* Update lifecycle method that is required to update the postUser state if the post passed down changes. */\n  componentDidUpdate() {\n    if (\n      this.state.postUser &&\n      this.props.post.author &&\n      this.props.post.author._id !== this.state.postUser._id\n    ) {\n      this.setState({ postUser: this.props.post.author });\n    }\n  }\n  /* This function manages the change from View state -> Edit State. */\n  handleEditClick = () => {\n    this.setState({ editState: true });\n  };\n\n  /* This function manages the change from Edit state -> View State. */\n  handleExitEdit = () => {\n    this.setState({ editState: false });\n  };\n\n  /* This function is responsible for saving the user's edit. \n\n     This will require a database call in later phases. */\n  handleEditPost = (id, post) => {\n    this.handleExitEdit();\n    this.props.editPost(id, post, this.props.currentUser._id);\n  };\n\n  /* This function is responsible for rendering the items as an li in the items\n     prop passed down from the parent component. */\n  renderItems = () => {\n    return this.props.post.items.map((item) => {\n      return (\n        <li key={item._id} className=\"request-item\">\n          {item.name}\n        </li>\n      );\n    });\n  };\n\n  /* \n\n  ------- Render function ----------\n\n    Given the current state of editState, if it is true, render the Edit component\n    otherwise render the view component. \n\n  */\n  render() {\n    if (this.state.postUser !== null) {\n      if (!this.state.editState) {\n        return (\n          <ViewRequest\n            highlightPost={this.props.highlightPost}\n            showConfirmation={this.props.showConfirmation}\n            renderItems={this.renderItems}\n            editClick={this.handleEditClick}\n            post={this.props.post}\n            postUser={this.state.postUser}\n          />\n        );\n      } else {\n        return (\n          <EditRequest\n            editPost={this.handleEditPost}\n            exitEdit={this.handleExitEdit}\n            post={this.props.post}\n            postUser={this.state.postUser}\n          />\n        );\n      }\n    } else {\n      return <></>;\n    }\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    currentUser: state.auth.currentUser,\n  };\n};\n\nexport default connect(mapStateToProps, { editPost })(Request);\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport AutoComplete from \"react-google-autocomplete\";\n\nimport \"../../stylesheets/newrequest.css\";\nimport ItemsList from \"../ItemsList/ItemsList\";\nimport { notifyInfo } from \"../../Utils/notificationUtils\";\n\nimport { createPost } from \"../../actions/timeline\";\n\nclass NewRequest extends React.Component {\n  /*\n\n  ------- State Initialization ----------\n\n    formReimbursement: The state that manages the reimbursement select option.\n    formDescription: The state that manages the description textarea for the new requst.\n    autocompleteValue: The state that manages the input value for the autocomplete\n    location: The state that holds the currently selected location, provided by the autocomplete.\n\n    items: The state that manages all the items the users wants to add to their request.\n\n  */\n  state = {\n    items: [],\n    formReimbursement: null,\n    formDescription: null,\n    autocompleteValue: \"\",\n    location: null,\n  };\n\n  /* This function handles changes to the item list */\n  handleItemsChange = (items) => {\n    this.setState({ items: items });\n  };\n\n  /* This function handles changes to the reimbursement value */\n  handleReimbursementChange = (e) => {\n    this.setState({ formReimbursement: e.target.value });\n  };\n\n  /* This function handles changes to the description textarea */\n  handleDescriptionChange = (e) => {\n    this.setState({ formDescription: e.target.value });\n  };\n\n  /* This function handles changes to the autocomplete input */\n  handleAutocompleteChange = (e) => {\n    this.setState({ autocompleteValue: e.target.value });\n  };\n\n  /* This function is responsible for creating a new request\n    \n     It validates the inputs and creates a new request.\n     Upon creating a new request, it resets the input values.\n\n     This is where we will make a database call to create a new post */\n  handleCreateRequest = (e) => {\n    e.preventDefault();\n    if (\n      this.state.autocompleteValue !== \"\" &&\n      this.state.formReimbursement !== null &&\n      this.state.items.length > 0 &&\n      this.state.location.lat !== null &&\n      this.state.location.lng !== null\n    ) {\n      // This guarentees a unique id by getting the last elements id, which has the largest\n      // id of all the posts, and adding 1 to it. This will be handled automatically by\n      // the database we later implement.\n      const newPost = {\n        author: this.props.currentUser.id,\n        location: this.state.location,\n        reimbursement: this.state.formReimbursement,\n        items: this.state.items,\n        description: this.state.formDescription,\n      };\n\n      this.setState({\n        formDescription: null,\n        formReimbursement: null,\n        autocompleteValue: \"\",\n        items: [],\n        location: { lat: null, lng: null },\n      });\n      this.props.createPost(newPost, this.props.currentUser._id);\n    } else if (this.state.autocompleteValue === \"\") {\n      notifyInfo(\"Please make sure your address is entered.\");\n    } else if (this.state.formReimbursement === null) {\n      notifyInfo(\"Please make sure your payment type is chosen.\");\n    } else if (this.state.items.length === 0) {\n      notifyInfo(\"Please enter the items you require for this request.\");\n    }\n  };\n\n  /*\n  \n  ------- Render function ----------\n     \n  This component renders all the inputs required to create a new request.\n\n  They are:\n    - Textarea for the description\n    - Input for the address (Google Autocomplete)\n    - Select for the payment type\n    - Input for the item list\n\n  It uses Google's Autocomplete API to retrieve addresses matching the user's input/\n\n  If the inputs are not valid, the create request button is disabled and the user \n  cannot create a new request.\n\n  */\n  render() {\n    return (\n      <div className=\"new-request\">\n        <div className=\"new-request-description\">\n          <img src={this.props.currentUser.profile_picture} alt=\"profile-pic\" />\n          <textarea\n            value={this.state.formDescription ? this.state.formDescription : \"\"}\n            className=\"new-post-description\"\n            placeholder=\"Provide information about your request here...\"\n            onChange={this.handleDescriptionChange}\n            rows=\"3\"\n          />\n        </div>\n        <div className=\"new-post-address\">\n          <AutoComplete\n            onChange={this.handleAutocompleteChange}\n            value={this.state.autocompleteValue}\n            id=\"address-input\"\n            placeholder=\"Enter your delivery address here\"\n            apiKey={\"AIzaSyARRBVg-xS1QeLJMfoCSeQm5At4Q-E7luU\"}\n            types={[\"address\"]}\n            onPlaceSelected={(place) => {\n              this.setState({\n                location: {\n                  lat: place.geometry.location.lat(),\n                  lng: place.geometry.location.lng(),\n                },\n                autocompleteValue: place.formatted_address,\n              });\n            }}\n          />\n          <div className=\"pay-selector\">\n            <select\n              className=\"form-new-post pay-select\"\n              onChange={(e) => this.handleReimbursementChange(e)}\n            >\n              {this.state.formReimbursement ? (\n                <></>\n              ) : (\n                <option selected disabled value={null}>\n                  Reimbursement\n                </option>\n              )}\n              <option value=\"Cash\">{\"Cash\"}</option>\n              <option value=\"E-transfer\">{\"E-Transfer\"}</option>\n              <option value=\"Cheque\">{\"Cheque\"}</option>\n            </select>\n          </div>\n        </div>\n        <div className=\"new-request-detail\">\n          <ItemsList\n            changeItems={this.handleItemsChange}\n            items={this.state.items}\n          />\n        </div>\n        <button\n          type=\"button\"\n          className=\"new-post-button\"\n          onClick={this.handleCreateRequest}\n        >\n          Create Request\n        </button>\n      </div>\n    );\n  }\n}\n\nexport default connect(null, { createPost })(NewRequest);\n","import React from \"react\";\nimport Modal from \"react-modal\";\nimport \"../../stylesheets/confirmationmodal.css\";\n\nimport { getSizeEstimate } from \"../../actions/timeline\";\n\nModal.setAppElement(\"#root\");\nclass ConfirmationModal extends React.Component {\n  /* \n\n  ------- Render function ----------\n\n    This component renders a modal on the screen that asks the user to confirm whether\n    they are willing to accept the request they clicked accept request on.\n\n    The modal is displayed depending on the confirmation prop that is passed down from the parent.\n    If confirmation is true, it displays the modal, otherwise the modal is hidden.\n\n  */\n  render() {\n    if (this.props.confirmation.display) {\n      return (\n        <Modal\n          isOpen={this.props.confirmation.display ? true : false}\n          onRequestClose={this.props.closeModal}\n          style={{\n            overlay: {\n              backgroundColor: \"rgba(0,0,0,0.3)\",\n              zIndex: 1031,\n            },\n            content: {\n              padding: \"0\",\n              border: \"none\",\n              borderRadius: \"5px\",\n              boxShadow: \"0 0 15px rgba(0,0,0,0.5)\",\n              backgroundColor: \" rgba(240,240,240,0.95)\",\n              width: \"40%\",\n              minWidth: \"300px\",\n              height: \"50vh\",\n              margin: \"auto\",\n            },\n          }}\n        >\n          <div className=\"confirmation-modal-header\">\n            <button\n              id=\"close-modal-btn\"\n              className=\"post-edit-cancel\"\n              onClick={this.props.closeModal}\n            >\n              <i className=\"fas fa-times\"></i>\n            </button>\n            <span>Are you sure you want to accept this request?</span>\n          </div>\n          <div className=\"confirmation-info\">\n            <div className=\"confirmation-author\">\n              <label>Request made by</label>\n              <img\n                src={\n                  this.props.confirmation.selectedPost.author.profile_picture\n                }\n                alt=\"requester-profile\"\n              ></img>\n              <div className=\"profile-info\">\n                <p>{this.props.confirmation.selectedPost.author.first_name}</p>\n              </div>\n            </div>\n            <div className=\"confirmation-size\">\n              <label>Size of Request</label>\n              <p>{getSizeEstimate(this.props.confirmation.selectedPost)}</p>\n            </div>\n          </div>\n          <div className=\"confirmation-actions\">\n            <button className=\"cancel-action\" onClick={this.props.closeModal}>\n              Cancel\n            </button>\n            <button\n              className=\"accept-action\"\n              onClick={() =>\n                this.props.acceptPost(this.props.confirmation.selectedPost)\n              }\n            >\n              Confirm\n            </button>\n          </div>\n        </Modal>\n      );\n    } else {\n      return <></>;\n    }\n  }\n}\n\nexport default ConfirmationModal;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport \"../../stylesheets/sidebar.css\";\n\nimport { logout } from \"../../actions/user\";\nimport { filterPosts } from \"../../actions/timeline\";\n\nclass Sidebar extends React.Component {\n  /* Initializing this component's state with \n   the dropdown filter options defaulting to null */\n  state = { filterDistance: null, filterSize: null, filterPayment: null };\n\n  /* This function handles the situation where the user clicks log out */\n  handleUserLogout = () => {\n    this.props.logout();\n  };\n\n  /* The functions that will handle a change in it's respective select html element */\n  handleDistanceChange(e) {\n    if (e.target.value === \"Any Distance\") {\n    } else {\n      this.setState({ filterDistance: e.target.value });\n    }\n  }\n  handleSizeChange(e) {\n    this.setState({ filterSize: e.target.value });\n  }\n  handlePaymentChange(e) {\n    this.setState({ filterPayment: e.target.value });\n  }\n\n  /* The function that will handle a click on the filter request button.\n     This function returns the current filter states back to the feed so\n     that the RequestTimeline can update it's filtering state. */\n  handleFilterClick = () => {\n    const filterRequest = {\n      ...this.state,\n    };\n    this.props.filterPosts(filterRequest, this.props.currentUserLocation);\n  };\n\n  /* Render Functions */\n  renderProfile() {\n    const currentUser = this.props.currentUser;\n    return (\n      <>\n        <div className=\"profile-header\">\n          <img src={currentUser.profile_picture} alt=\"profile\"></img>\n          <div className=\"profile-info\">\n            <p>\n              {currentUser.first_name} {currentUser.last_name}\n            </p>\n          </div>\n        </div>\n        <div id=\"sidebar-tabs\">\n          <Link to=\"/\">Home</Link>\n          <Link to=\"/settings\">Settings</Link>\n          <button onClick={this.handleUserLogout}>Log out</button>\n        </div>\n      </>\n    );\n  }\n  renderFilter() {\n    return (\n      <div className=\"filter-section\">\n        <div className=\"dropdown-filters\">\n          <select\n            defaultValue={\"any\"}\n            onChange={(e) => this.handleDistanceChange(e)}\n          >\n            <option value=\"any\">Any Distance</option>\n            <option value=\"1\">{\"< 1km\"}</option>\n            <option value=\"5\">{\"< 5km\"}</option>\n            <option value=\"20\">{\"< 20km\"}</option>\n            <option value=\"21\">{\"20+km\"}</option>\n          </select>\n\n          <select\n            defaultValue={\"any\"}\n            onChange={(e) => this.handleSizeChange(e)}\n          >\n            <option value=\"any\">Any Size</option>\n            <option value=\"small\">Small</option>\n            <option value=\"medium\">Medium</option>\n            <option value=\"large\">Large</option>\n          </select>\n\n          <select\n            defaultValue={\"any\"}\n            onChange={(e) => this.handlePaymentChange(e)}\n          >\n            <option value=\"any\">Any Payment</option>\n            <option value=\"cash\">Cash</option>\n            <option value=\"e-transfer\">E-transfer</option>\n            <option value=\"cheque\">Cheque</option>\n          </select>\n        </div>\n\n        <button\n          type=\"button\"\n          className=\"filter-button\"\n          onClick={this.handleFilterClick}\n        >\n          Filter Requests\n        </button>\n      </div>\n    );\n  }\n\n  render() {\n    return (\n      <div className=\"sidebar\">\n        {this.renderProfile()}\n        {this.renderFilter()}\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    currentUser: state.auth.currentUser,\n  };\n};\nexport default connect(mapStateToProps, { logout, filterPosts })(Sidebar);\n","import React from \"react\";\nimport { v4 as uuidv4 } from \"uuid\";\n\nimport {\n  GoogleMap,\n  withScriptjs,\n  withGoogleMap,\n  Marker,\n  InfoWindow,\n  Circle,\n  DirectionsRenderer,\n} from \"react-google-maps\";\nimport { getSizeEstimate } from \"../../actions/timeline\";\n\nclass Map extends React.Component {\n  /*\n\n  ------- State Initialization ----------\n    \n    previousLocation: This state holds the previously selected location by the user so that the\n                      map stays on its current position upon rerender.\n    mapSelectedPost: This state holds the selected request by the user using the map.\n    activeRequest: This state holds the request that is currently active for the user. \n    \n  */\n  state = {\n    directions: null,\n    previousLocation: null,\n    mapSelectedPost: null,\n    activeRequest: this.props.active_post ? this.props.posts[0] : null,\n  };\n  componentDidMount() {\n    if (this.state.activeRequest && this.props.currentUserLocation) {\n      this.setDirections();\n    }\n  }\n\n  componentDidUpdate(prevState) {\n    if (\n      this.state.activeRequest &&\n      this.props.currentUserLocation &&\n      prevState.currentUserLocation === null\n    ) {\n      this.setDirections();\n    }\n  }\n\n  setDirections() {\n    const directionsService = new window.google.maps.DirectionsService();\n\n    const origin = {\n      lat: this.props.currentUserLocation.latitude,\n      lng: this.props.currentUserLocation.longitude,\n    };\n    const destination = this.state.activeRequest.location;\n\n    directionsService.route(\n      {\n        origin: origin,\n        destination: destination,\n        travelMode: window.google.maps.TravelMode.DRIVING,\n      },\n      (result, status) => {\n        if (status === window.google.maps.DirectionsStatus.OK) {\n          this.setState({\n            directions: result,\n          });\n        } else {\n          console.error(`error fetching directions ${result}`);\n        }\n      }\n    );\n  }\n\n  /* This function is responsible for changing the mapSelectedPost state when the user clicks on a circle within the Map */\n  setSelectedRequest(post) {\n    const previousLocation = this.props.highlightedPost\n      ? this.props.highlightedPost\n      : this.state.mapSelectedPost;\n    this.props.resetFeedSelectedPost(null);\n    this.setState({\n      previousLocation: previousLocation ? previousLocation.location : null,\n      mapSelectedPost: post,\n    });\n  }\n\n  /* This function is responsible for determining where the default center is for the map. Precedence is determined by the if condifiton \n     Defaults to the co-ordinates of Toronto */\n  setDefaultCenter() {\n    if (this.state.activeRequest) {\n      return this.state.activeRequest.location;\n    } else if (this.props.highlightedPost) {\n      return this.props.highlightedPost.location;\n    } else if (this.state.mapSelectedPost) {\n      return this.state.mapSelectedPost.location;\n    } else if (this.state.previousLocation) {\n      return this.state.previousLocation;\n    } else if (this.props.currentUserLocation) {\n      return {\n        lat: this.props.currentUserLocation.latitude,\n        lng: this.props.currentUserLocation.longitude,\n      };\n    } else {\n      return { lat: 43.65107, lng: -79.347015 };\n    }\n  }\n\n  /* This function renders the markers within the map.\n     If the user has an active request, it only renders that one request with a precise marker\n     otherwise it renders circles around the location of the requests currently displayed in the timeline. */\n  renderLocations() {\n    if (this.state.activeRequest) {\n      return this.props.posts.map((post) => (\n        <Marker key={post.id} position={this.state.activeRequest.location}>\n          <InfoWindow>\n            <div className=\"marker-description\">\n              {this.state.activeRequest.description}\n            </div>\n          </InfoWindow>\n        </Marker>\n      ));\n    } else {\n      return this.props.posts.map((post) => (\n        <>\n          <Circle\n            key={post._id}\n            radius={2000}\n            center={{ lat: post.location.lat, lng: post.location.lng }}\n            onClick={() => {\n              this.setSelectedRequest(post);\n            }}\n            strokeColor=\"transparent\"\n            strokeOpacity={0.5}\n            strokeWeight={1}\n            fillColor=\"#FFFFFF\"\n            fillOpacity={0.2}\n          ></Circle>\n          {this.state.mapSelectedPost &&\n          post.location.lat === this.state.mapSelectedPost.location.lat &&\n          post.location.lng === this.state.mapSelectedPost.location.lng ? (\n            <InfoWindow\n              position={this.state.mapSelectedPost.location}\n              onCloseClick={() => this.setSelectedRequest(null)}\n            >\n              <div className=\"marker-container\">\n                <div className=\"marker-author-info\">\n                  <img\n                    className=\"marker-author-pic\"\n                    src={this.state.mapSelectedPost.author.profile_picture}\n                    alt=\"author\"\n                  />\n                  <span className=\"marker-author-name\">\n                    {this.state.mapSelectedPost.author.first_name}'s Request\n                  </span>\n                </div>\n                <div className=\"marker-size\">\n                  {getSizeEstimate(this.state.mapSelectedPost)}\n                </div>\n                <div className=\"marker-description\">\n                  {this.state.mapSelectedPost.description}\n                </div>\n              </div>\n            </InfoWindow>\n          ) : null}\n          {this.props.highlightedPost &&\n          post.location.lat === this.props.highlightedPost.location.lat &&\n          post.location.lng === this.props.highlightedPost.location.lng ? (\n            <InfoWindow\n              position={this.props.highlightedPost.location}\n              onCloseClick={() => this.setSelectedRequest(null)}\n            >\n              <div className=\"marker-container\">\n                <div className=\"marker-author-info\">\n                  <img\n                    className=\"marker-author-pic\"\n                    src={this.props.highlightedPost.author.profile_picture}\n                    alt=\"author\"\n                  />\n                  <span className=\"marker-author-name\">\n                    {this.props.highlightedPost.author.first_name}'s Request\n                  </span>\n                </div>\n                <div className=\"marker-size\">\n                  {getSizeEstimate(this.props.highlightedPost)}\n                </div>\n\n                <div className=\"marker-description\">\n                  {this.props.highlightedPost.description}\n                </div>\n              </div>\n            </InfoWindow>\n          ) : null}\n        </>\n      ));\n    }\n  }\n  render() {\n    // Force re-render, otherwise, markers are not changed.\n    const newKey = uuidv4();\n    if (this.state.activeRequest && this.state.directions) {\n      return (\n        <GoogleMap\n          key={newKey}\n          defaultCenter={this.setDefaultCenter()}\n          defaultZoom={10}\n        >\n          <DirectionsRenderer directions={this.state.directions} />\n        </GoogleMap>\n      );\n    } else {\n      return (\n        <GoogleMap\n          key={newKey}\n          defaultZoom={10}\n          defaultCenter={this.setDefaultCenter()}\n        >\n          {this.renderLocations()}\n        </GoogleMap>\n      );\n    }\n  }\n}\n\nexport default withScriptjs(withGoogleMap(Map));\n","import React from \"react\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport Sidebar from \"../Sidebar/Sidebar\";\nimport Map from \"../Timeline/Map\";\nimport { connect } from \"react-redux\";\n\nimport \"../../stylesheets/activerequest.css\";\n\nimport { completePost } from \"../../actions/user\";\n\nconst keys = {\n  key1: \"AIzaSyCx3EBDjdwQ4Gb6698FPEWsTB7bNL_o7Ow\",\n  key2: \"AIzaSyARRBVg-xS1QeLJMfoCSeQm5At4Q-E7luU\",\n};\n\nclass ActiveRequest extends React.Component {\n  state = {\n    postAuthor: this.props.currentUser.active_post.author,\n  };\n\n  completeRequest = () => {\n    this.props.completePost(\n      this.props.currentUser.active_post._id,\n      this.props.currentUser._id\n    );\n  };\n\n  renderItems = () => {\n    return this.props.currentUser.active_post.items.map((item) => {\n      return (\n        <li key={uuidv4()} className=\"request-item\">\n          {item.name}\n        </li>\n      );\n    });\n  };\n\n  render() {\n    if (this.props.currentUser.active_post !== null) {\n      return (\n        <>\n          <Sidebar currentUserLocation={this.props.currentUserLocation} />\n          <div className=\"timeline\">\n            <div className=\"active-request-container\">\n              <div className=\"active-request-header\">\n                <h5>You have an active request...</h5>\n              </div>\n              <div className=\"active-request-author\">\n                <h4>\n                  {this.state.postAuthor.first_name}\n                  's Request\n                </h4>\n              </div>\n              <div className=\"map-route\">\n                <Map\n                  currentUserLocation={this.props.currentUserLocation}\n                  active_post={true}\n                  posts={[this.props.currentUser.active_post]}\n                  googleMapURL={`https://maps.googleapis.com/maps/api/js?v=3.exp&libraries=geometry,drawing,places&key=${keys.key2}`}\n                  loadingElement={<div style={{ height: \"100%\" }} />}\n                  containerElement={<div style={{ height: \"100%\" }} />}\n                  mapElement={<div style={{ height: \"100%\" }} />}\n                />\n              </div>\n              <div className=\"active-items-requested\">\n                <label>Items Requested</label>\n                <ul className=\"request-items-list\">{this.renderItems()}</ul>\n              </div>\n              <div className=\"active-description\">\n                <label>Description Provided</label>\n                <p>{this.props.currentUser.active_post.description}</p>\n              </div>\n              <div className=\"end-active-request\">\n                <button id=\"complete-request\" onClick={this.completeRequest}>\n                  Request Completed\n                </button>\n              </div>\n            </div>\n          </div>\n        </>\n      );\n    } else {\n      return <></>;\n    }\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    currentUser: state.auth.currentUser,\n  };\n};\n\nexport default connect(mapStateToProps, { completePost })(ActiveRequest);\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport Request from \"../Request/Request\";\nimport NewRequest from \"../NewRequest/NewRequest\";\nimport ConfirmationModal from \"./ConfirmationModal\";\nimport ActiveRequest from \"../ActiveRequest/ActiveRequest\";\nimport Sidebar from \"../Sidebar/Sidebar\";\nimport Map from \"./Map\";\n\nimport { acceptPost } from \"../../actions/user\";\nimport { filterPosts } from \"../../actions/timeline\";\nimport { notifyError } from \"../../Utils/notificationUtils\";\n\nimport \"../../stylesheets/timeline.css\";\n\nconst keys = {\n  key1: \"AIzaSyCx3EBDjdwQ4Gb6698FPEWsTB7bNL_o7Ow\",\n  key2: \"AIzaSyARRBVg-xS1QeLJMfoCSeQm5At4Q-E7luU\",\n};\n\nclass Timeline extends React.Component {\n  constructor(props) {\n    super(props);\n    /*\n\n    ------- State Initialization ----------\n    \n      highlightedPost: This state manages the post to currently highlight within the maps inside the sidebar.\n      posts: This state holds the posts lists passed down from the parent component.\n      confirmationModal: This state manages whether to display the confirmation modal and is responsible for \n                         passing the post information down to the modal itself.\n      currentPage: This state manages the page the current user is viewing, default is set to 1.\n      postsPerPage: This state contains the amount of posts per page, default is set to 5.\n    \n    */\n    this.state = {\n      showMap: true,\n      currentUserLocation: null,\n      highlightedPost: null,\n      confirmationModal: {\n        display: false,\n        selectedPost: null,\n      },\n      currentPage: 1,\n      postsPerPage: 5,\n    };\n    this.handlePageClick = this.handlePageClick.bind(this);\n  }\n\n  componentDidMount() {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(this.getUserLocation);\n    } else {\n      notifyError(\"Geolocation is not supported on this browser\");\n    }\n  }\n\n  getUserLocation = (position) => {\n    this.setState({ currentUserLocation: position.coords });\n  };\n\n  /* Function responsible for returning the filtered posts */\n  filterPosts() {\n    return filterPosts(this.props.posts, this.props.posts);\n  }\n\n  /* This function manages the changes regarding the highlighted post within the map. \n     If a new post is clicked on, it sets that post as the highlighted post in the map. */\n  handleHighlightedPostChange = (post) => {\n    this.setState({ highlightedPost: post });\n  };\n\n  /* Upon clicking accept request, this function manages displaying the modal by changing the confirmation state. */\n  handleConfirmationModal = (post) => {\n    this.setState({ confirmationModal: { display: true, selectedPost: post } });\n  };\n\n  /* This function handles if the confirmation modal needs to be closed. */\n  handleCloseModal = () => {\n    this.setState({\n      confirmationModal: { display: false, selectedPost: null },\n    });\n  };\n\n  /* Upon confirming, this function is responsible for updating the current users active story attribute\n     so that they cannot view the feed, as long as this request is active. \n     \n     The request does not get deleted from the list upon accepting currently because our requests are hardcoded\n     in the Feed.js component. When the user state changes, the App component rerenders since users is hardcoded\n     in App.js. Therefore, the default posts get recreated once Feed rerenders due to it being a child of App.\n\n     This function will require database calls in later phases which will fix our current deleting issue. */\n  handleAcceptPost = (post) => {\n    this.handleCloseModal();\n    this.props.acceptPost(post._id, this.props.currentUser._id);\n  };\n\n  /* This function handles the changing of the page */\n  handlePageClick(num) {\n    this.setState({\n      currentPage: this.state.currentPage + num,\n    });\n  }\n\n  toggleMap = () => {\n    this.setState({\n      showMap: !this.state.showMap,\n    });\n  };\n  renderPagination() {\n    return (\n      <>\n        {this.state.currentPage === 1 ? (\n          <div className=\"navigate-page disabled\">\n            <i className=\"fas fa-angle-double-left\"></i>\n            Previous Page\n          </div>\n        ) : (\n          <div\n            className=\"navigate-page\"\n            onClick={() => this.handlePageClick(-1)}\n          >\n            <i className=\"fas fa-angle-double-left\"></i>\n            Previos Page\n          </div>\n        )}\n\n        <div className=\"current-page\">Page {this.state.currentPage}</div>\n        {this.state.currentPage * this.state.postsPerPage >=\n        this.props.posts.length ? (\n          <div className=\"navigate-page disabled\">\n            Next Page\n            <i className=\"fas fa-angle-double-right\"></i>\n          </div>\n        ) : (\n          <div\n            className=\"navigate-page\"\n            onClick={() => this.handlePageClick(1)}\n          >\n            Next Page\n            <i className=\"fas fa-angle-double-right\"></i>\n          </div>\n        )}\n      </>\n    );\n  }\n  /* If the request list empty due to no requests or filter being to strict,\n     this function is responsible for rendering an empty message instead. */\n  renderEmptyMessage() {\n    return (\n      <div className=\"empty-message\">\n        No requests exist or match your filter.\n      </div>\n    );\n  }\n  renderGoogleMap(filteredPosts) {\n    return (\n      <div className=\"google-maps-container\">\n        <div\n          className={`google-maps-section ${this.state.showMap ? \"\" : \"hide\"}`}\n        >\n          <Map\n            currentUserLocation={this.state.currentUserLocation}\n            resetFeedSelectedPost={this.handleHighlightedPostChange}\n            highlightedPost={this.state.highlightedPost}\n            active_post={false}\n            posts={filteredPosts}\n            googleMapURL={`https://maps.googleapis.com/maps/api/js?v=3.exp&libraries=geometry,drawing,places&key=${keys.key2}`}\n            loadingElement={<div style={{ height: \"100%\" }} />}\n            containerElement={<div style={{ height: \"100%\" }} />}\n            mapElement={<div style={{ height: \"100%\" }} />}\n          />\n        </div>\n        <div>\n          <button className=\"toggle-map\" onClick={this.toggleMap}>\n            {this.state.showMap ? \"Hide Map\" : \"Show Map\"}\n          </button>\n        </div>\n      </div>\n    );\n  }\n\n  /* \n\n  ------- Render function ----------\n\n    This render function renders the correct number of posts depending on the filter state, and \n    the current page state. \n\n    It renders the Sidebar, followed by the RequestAsk component, and then it maps through the\n    correct number posts, and renders the RequestPost component for each post.\n\n    It is also responsible for rendering the PostModal given the state of confirmation.\n\n  */\n  render() {\n    if (this.props.currentUser.active_post !== null) {\n      return (\n        <ActiveRequest currentUserLocation={this.state.currentUserLocation} />\n      );\n    } else {\n      if (this.props.posts != null) {\n        let posts = this.props.posts;\n        let { currentPage, postsPerPage } = this.state;\n        let indexOfLastPost = currentPage * postsPerPage;\n        let indexOfFirstPost = indexOfLastPost - postsPerPage;\n        let currentPosts = posts.slice(indexOfFirstPost, indexOfLastPost);\n\n        if (currentPage !== 1 && currentPosts.length === 0) {\n          currentPage = 1;\n          indexOfLastPost = currentPage * postsPerPage;\n          indexOfFirstPost = indexOfLastPost - postsPerPage;\n          currentPosts = posts.slice(indexOfFirstPost, indexOfLastPost);\n        }\n\n        const renderPosts = currentPosts.map((post, index) => {\n          return (\n            <Request\n              highlightPost={this.handleHighlightedPostChange}\n              showConfirmation={this.handleConfirmationModal}\n              key={index}\n              post={post}\n            />\n          );\n        });\n\n        return (\n          <>\n            <Sidebar currentUserLocation={this.state.currentUserLocation} />\n            <div className=\"timeline\">\n              {this.renderGoogleMap(currentPosts)}\n              <NewRequest currentUser={this.props.currentUser} />\n              {currentPosts.length === 0 ? (\n                this.renderEmptyMessage()\n              ) : (\n                <>\n                  <ul className=\"posts\">{renderPosts}</ul>\n                  <div id=\"pagination\">{this.renderPagination()}</div>\n                </>\n              )}\n            </div>\n            <ConfirmationModal\n              acceptPost={this.handleAcceptPost}\n              confirmation={this.state.confirmationModal}\n              closeModal={this.handleCloseModal}\n            />\n          </>\n        );\n      } else {\n        return <></>;\n      }\n    }\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    currentUser: state.auth.currentUser,\n    posts: state.posts.posts,\n  };\n};\n\nexport default connect(mapStateToProps, { acceptPost })(Timeline);\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Redirect } from \"react-router-dom\";\nimport Timeline from \"../Timeline/Timeline\";\n\nimport \"../../stylesheets/feed.css\";\n\nimport { getPosts } from \"../../actions/timeline\";\n\nclass Feed extends React.Component {\n  /*\n\n    ------- State Initialization ----------\n\n      filterDistance: The value given by the select distance element in the sidebar\n      filterSize: The value given by the select favour size element in the sidebar\n      filterPayment: The value given by the select payment type element in the sidebar\n\n      posts: Hardcoded requests and their information. This will require a databse fetch in later phases of the project.\n\n    */\n\n  state = {\n    filterDistance: null,\n    filterSize: null,\n    filterPayment: null,\n    setState: this.setState.bind(this),\n  };\n\n  componentDidMount() {\n    this.props.getPosts();\n  }\n\n  /* This function will handle a change in the filter state by updating\n      every filter option that needs to change */\n  handleFilterChange = (newFilter) => {\n    this.setState({ ...newFilter });\n  };\n\n  /* \n  \n  ------- Render function ----------\n     \n     If the current user is not logged in, it redirects to the login page.\n\n     If the current user has an active request they need to finish, it renders the \n     ActiveRequest component.\n\n     If the current user is logged in and has no active request, they will be able to\n     view the feed and all of the requests currently pending. \n\n  */\n  render() {\n    if (this.props.currentUser === null) {\n      return <Redirect to=\"/login\" />;\n    } else {\n      return (\n        <div className=\"feedContainer slide\">\n          <Timeline changeFilterState={this.handleFilterChange} />\n        </div>\n      );\n    }\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    currentUser: state.auth.currentUser,\n  };\n};\n\nexport default connect(mapStateToProps, { getPosts })(Feed);\n","import React from \"react\";\nimport Navbar from \"../Navigation/Navbar\";\nimport { connect } from \"react-redux\";\n\nimport { Redirect } from \"react-router-dom\";\nimport \"../../stylesheets/shared.css\";\nimport \"../../stylesheets/auth-forms.css\";\nimport signupPic from \"../../images/signup.svg\";\n\nimport { register } from \"../../actions/user\";\n\nconst default_state = {\n  // Fields\n  first_name: \"\",\n  last_name: \"\",\n  email: \"\",\n  password: \"\",\n  password_confirmation: \"\",\n};\n\nclass Signup extends React.Component {\n  state = default_state;\n\n  handleChange = (e) => {\n    const target = e.target;\n    const value = target.value;\n    const name = target.name;\n\n    this.setState({\n      [name]: value,\n    });\n  };\n\n  formSubmit = (e) => {\n    e.preventDefault();\n    this.props.register(this.state);\n  };\n\n  render() {\n    if (this.props.currentUser) {\n      return <Redirect to=\"/feed\" />;\n    }\n    return (\n      <>\n\n        <Navbar />\n        <div className=\"contentContainer slide\">\n          <div className=\"form-container\">\n            <h3>Signup</h3>\n            <img src={signupPic} alt=\"signup\"></img>\n            <form onSubmit={this.formSubmit}>\n              <div className=\"form-input\">\n                <input\n                  name=\"first_name\"\n                  type=\"text\"\n                  placeholder=\"First Name\"\n                  onChange={this.handleChange}\n                ></input>\n                <p className=\"error_msg\">{this.state.first_name_error}</p>\n              </div>\n              <div className=\"form-input\">\n                <input\n                  name=\"last_name\"\n                  type=\"text\"\n                  placeholder=\"Last Name\"\n                  onChange={this.handleChange}\n                ></input>\n                <p className=\"error_msg\">{this.state.last_name_error}</p>\n              </div>\n              <div className=\"form-input\">\n                <input\n                  name=\"email\"\n                  type=\"email\"\n                  placeholder=\"Email\"\n                  onChange={this.handleChange}\n                ></input>\n\n                <p className=\"error_msg\">{this.state.email_error}</p>\n              </div>\n              <div className=\"form-input\">\n                <input\n                  name=\"password\"\n                  type=\"password\"\n                  placeholder=\"Password\"\n                  onChange={this.handleChange}\n                ></input>\n\n                <p className=\"error_msg\">{this.state.password_error}</p>\n              </div>\n              <div className=\"form-input\">\n                <input\n                  name=\"password_confirmation\"\n                  type=\"password\"\n                  placeholder=\"Confirm Password\"\n                  onChange={this.handleChange}\n                ></input>\n\n                <p className=\"error_msg\">{this.state.password_confirmation_error}</p>\n              </div>\n              <div className=\"form-input\">\n                <button className=\"form-submit\" type=\"buton\" onSubmit={this.formSubmit}>\n                  Submit\n\n\n                </button>\n              </div>\n            </form>\n          </div>\n        </div>\n      </>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    currentUser: state.auth.currentUser,\n  };\n};\n\nexport default connect(mapStateToProps, { register })(Signup);","import React from \"react\";\nimport { connect } from \"react-redux\";\n\nimport Navbar from \"../Navigation/Navbar\";\nimport { Redirect } from \"react-router-dom\";\nimport \"../../stylesheets/shared.css\";\nimport \"../../stylesheets/auth-forms.css\";\nimport loginPic from \"../../images/login.svg\";\n\nimport { login } from \"../../actions/user\";\n\nconst defaultState = {\n  // Fields\n  email: \"\",\n  password: \"\",\n};\n\nclass Login extends React.Component {\n  state = defaultState;\n\n  handleChange = (e) => {\n    const target = e.target;\n    const value = target.value;\n    const name = target.name;\n\n    this.setState({\n      [name]: value,\n    });\n  };\n\n  formSubmit = (e) => {\n    e.preventDefault();\n    this.props.login(this.state);\n  };\n\n  render() {\n    if (this.props.currentUser) {\n      return <Redirect to=\"/feed\" />;\n    }\n    return (\n      <>\n\n\n        <Navbar />\n        <div className=\"contentContainer slide\">\n          <div className=\"form-container\">\n            <h3>Login</h3>\n            <img src={loginPic} alt=\"login\"></img>\n            <form onSubmit={this.formSubmit}>\n              <p className=\"error_msg\">{this.state.error_msg}</p>\n              <div className=\"form-input\">\n                <input\n                  name=\"email\"\n                  type=\"email\"\n                  placeholder=\"Email\"\n                  onChange={this.handleChange}\n                ></input>\n              </div>\n              <div className=\"form-input\">\n                <input\n                  name=\"password\"\n                  type=\"password\"\n                  placeholder=\"Password\"\n                  onChange={this.handleChange}\n                ></input>\n              </div>\n              <div className=\"form-input\">\n                <button className=\"form-submit\" type=\"buton\" onSubmit={this.formSubmit}>\n                  Submit\n\n                </button>\n              </div>\n            </form>\n          </div>\n        </div>\n      </>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    currentUser: state.auth.currentUser,\n  };\n};\nexport default connect(mapStateToProps, { login })(Login);","import React from \"react\";\nimport { Redirect } from \"react-router-dom\";\n\nclass Logout extends React.Component {\n  render() {\n    return <Redirect to=\"/login\" />;\n  }\n}\n\nexport default Logout;\n","import React from \"react\";\nimport \"../../stylesheets/userinfo.css\";\nimport { Link } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport { getUserById } from \"../../actions/user\";\nimport { getNumPostsByUserId } from \"../../actions/timeline\";\n\n\nclass UserInfo extends React.Component {\n\n  \n\n  render() {\n    const currentUser = this.props.currentUser;\n\n    return (\n      <div className=\"user-curr-info\">\n        <Link to=\"/feed\">\n          <button className=\"back-button\">\n            <i className=\"fa fa-chevron-left\" aria-hidden=\"true\"></i>\n          </button>\n        </Link>\n        <div className=\"profile-img\">\n          <img src={currentUser.profile_picture} alt=\"profile\" />\n        </div>\n        <h3>\n          {currentUser.first_name} {currentUser.last_name}{\" \"}\n        </h3>\n        <h4>{currentUser.email}</h4>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    currentUser: state.auth.currentUser,\n  };\n};\nexport default connect(mapStateToProps, { getUserById })(UserInfo);\n","import React from \"react\";\n\nimport { connect } from \"react-redux\";\nimport { addImage } from \"../../actions/image\";\nimport \"../../stylesheets/upload.css\";\n\n\n/* Component for the Image Form */\nclass Upload extends React.Component {\n\n  uploadProfilePic = (e) => {\n    const reader = new FileReader();\n    reader.readAsDataURL(e.target.files[0]);\n\n    reader.onloadend = () => {\n      const id = this.props.currentUser._id;\n      this.props.addImage(id, reader.result); \n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <label>Profile picture:</label>\n        <input name=\"profile_picture\"\n               type=\"file\"\n               onChange={(e) => this.uploadProfilePic(e)}/>        \n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    currentUser: state.auth.currentUser,\n  };\n};\nexport default connect(mapStateToProps, { addImage })(Upload);\n","import { notifySuccess, notifyError } from \"../Utils/notificationUtils\";\n\n// A function to send a POST request with a new image\nexport const addImage = (id, img) => {\n\n  return async (dispatch) => {\n    // Create our request constructor with all the parameters we need\n    const url = \"/users/image/\" + id;\n    const request = new Request(url, {\n        method: \"post\",\n        body: JSON.stringify({data: img}),\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n    });\n\n    const response = await fetch(request);\n    if(response.status === 200){\n      const data = await response.json();\n      dispatch({ type: \"SET_PROFILE_PIC\", payload: data });\n      notifySuccess(\"Profile picture updated\");\n    }else{\n      notifyError(\"Could not update profile picture\")\n    }\n\n  };\n\n\n};\n","import React from \"react\";\nimport \"../../stylesheets/userupdateform.css\";\n\nimport { connect } from \"react-redux\";\nimport { getUserById } from \"../../actions/user\";\nimport { updateUser } from \"../../actions/user\";\n\nimport Upload from \"../Upload/Upload\";\n\nclass UserUpdateForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      first_name: \"\",\n      last_name: \"\",\n      email: \"\",\n      password: \"\",\n    };\n  }\n\n  formSubmit = (e) => {\n    e.preventDefault();\n    this.props.updateUser(this.props.currentUser._id, this.state);\n  };\n\n  handleChange = (e) => {\n    const target = e.target;\n    const name = target.name;\n    const value = target.value;\n\n    this.setState({\n      [name]: value,\n    });\n  };\n\n  render() {\n    const currentUser = this.props.currentUser;\n    return (\n      <div className={`user-update-info ${this.props.adminClass}`}>\n        {this.props.adminClass ? <></> : <h3>Update Information</h3>}\n\n        {/*<p className=\"success_msg\">{this.state.success_msg}</p>*/}\n        <form className=\"update-form\" onSubmit={this.formSubmit}>\n          <div className=\"update-input-container\">\n            <label>First Name</label>\n            <input\n              name=\"first_name\"\n              type=\"text\"\n              placeholder={currentUser.first_name}\n              onChange={this.handleChange}\n            ></input>\n            {/*<p className=\"error_msg\">{this.state.first_name_error}</p>*/}\n          </div>\n\n          <div className=\"update-input-container\">\n            <label>Last Name</label>\n            <input\n              name=\"last_name\"\n              type=\"text\"\n              placeholder={currentUser.last_name}\n              onChange={this.handleChange}\n            ></input>\n            {/*<p className=\"error_msg\">{this.state.last_name_error}</p>*/}\n          </div>\n\n          <div className=\"update-input-container\">\n            <label>Email</label>\n            <input\n              name=\"email\"\n              type=\"email\"\n              placeholder={currentUser.email}\n              onChange={this.handleChange}\n            ></input>\n            {/*<p className=\"error_msg\">{this.state.email_error}</p>*/}\n          </div>\n\n          <div className=\"update-input-container\">\n            <label>Password</label>\n            <input\n              name=\"password\"\n              type=\"password\"\n              placeholder=\"Password\"\n              onChange={this.handleChange}\n            ></input>\n            {/*<p className=\"error_msg\">{this.state.password_error}</p>*/}\n          </div>\n\n          <div className=\"update-input-container\">\n            <Upload />\n          </div>\n\n          <div className=\"update-input-container\">\n            <button\n              className=\"update-submit\"\n              type=\"buton\"\n              onSubmit={this.formSubmit}\n            >\n              Update info\n            </button>\n          </div>\n        </form>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    currentUser: state.auth.currentUser,\n  };\n};\n\nexport default connect(mapStateToProps, { getUserById, updateUser })(\n  UserUpdateForm\n);\n","import React from \"react\";\nimport \"../../stylesheets/settings.css\";\nimport { Redirect } from \"react-router-dom\";\nimport UserInfo from \"../UserInfo/UserInfo\";\nimport UserUpdateForm from \"../UserUpdateForm/UserUpdateForm\";\nimport { getUserById } from \"../../actions/user\";\nimport { connect } from \"react-redux\";\n\nclass Settings extends React.Component {\n  render() {\n    const currentUser = this.props.currentUser;\n    if (currentUser === null) {\n      return <Redirect to=\"/login\" />;\n  \n    } else if (currentUser.admin === true) {\n      return <Redirect to=\"/admin\" />;\n      \n    }else{\n\n      return (\n        <div className=\"settings-container settings\">\n          <UserInfo />\n          <div className=\"user-update-container\">\n            <UserUpdateForm />\n          </div>\n        </div>\n      );\n    }\n\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    currentUser: state.auth.currentUser,\n  };\n};\n\nexport default connect(mapStateToProps, { getUserById })(Settings);\n","import React from \"react\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport \"../../stylesheets/settingsAdmin.css\";\n\nclass CreateAdmin extends React.Component {\n  state = { userToPromote: \"\" };\n\n  handleInputChange = (e) => {\n    this.setState({\n      userToPromote: e.target.value,\n    });\n  };\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n    this.props.promoteUser(this.state.userToPromote);\n    this.setState({ userToPromote: \"\" });\n  };\n\n  render() {\n    return (\n      <div className=\"make-user-admin\">\n        <form className=\"make-admin-form\">\n          <label className=\"make-admin-label\">Make A User An Admin</label>\n\n          <input\n            type=\"text\"\n            name=\"name\"\n            value={this.state.userToPromote}\n            placeholder=\"Email of user to promote\"\n            onChange={(e) => this.handleInputChange(e)}\n          />\n          <button\n            className=\"promoteButton\"\n            type=\"submit\"\n            onClick={(e) => this.handleSubmit(e)}\n          >\n            Promote\n          </button>\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default CreateAdmin;\n","import React from \"react\";\nimport CreateAdmin from \"./CreateAdmin\";\nimport { getAllUsers, deleteUser, promoteUser } from \"../../actions/user\";\n\nimport { notifyError } from \"../../Utils/notificationUtils\";\n\nclass ViewUsers extends React.Component {\n  state = {\n    users: [],\n  };\n\n  componentDidMount() {\n    getAllUsers().then((users) => {\n      this.setState({\n        users: users,\n      });\n    });\n  }\n\n  deleteUserAndPosts = async (user) => {\n    if (user.admin) {\n      notifyError(\"Cannot delete admin\");\n    } else {\n      const users = await deleteUser(user._id);\n      if (users) {\n        this.setState({\n          users: users,\n        });\n      }\n    }\n  };\n\n  promoteUser = async (userToPromote) => {\n    const users = await promoteUser(userToPromote);\n    if (users) {\n      this.setState({ users: users });\n    }\n  };\n\n  renderUsers() {\n    return this.state.users.map((user) => {\n      return (\n        <tr className=\"user-row\" key={user._id}>\n          <td>{user.admin ? \"Yes\" : \"No\"}</td>\n          <td>\n            {user.first_name} {user.last_name}\n          </td>\n          <td>{user.email}</td>\n          <td>{user.rating}</td>\n          <td>\n            <button className=\"remove-user\">\n              <i\n                className=\"fas fa-trash\"\n                onClick={() => this.deleteUserAndPosts(user)}\n              ></i>\n            </button>\n          </td>\n        </tr>\n      );\n    });\n  }\n  render() {\n    return (\n      <>\n        <CreateAdmin promoteUser={this.promoteUser} />\n        <table className=\"user-list-table\">\n          <thead>\n            <tr id=\"users-list-header\">\n              <th className=\"promote-col\" scole=\"col\">\n                Admin\n              </th>\n              <th className=\"name-col\" scope=\"col\">\n                Name\n              </th>\n              <th className=\"email-col\" scope=\"col\">\n                Email\n              </th>\n              <th className=\"rating-col\" scope=\"col\">\n                Rating\n              </th>\n              <th className=\"remove-col\" scope=\"col\">\n                Delete User\n              </th>\n            </tr>\n          </thead>\n          <tbody>{this.renderUsers()}</tbody>\n        </table>\n      </>\n    );\n  }\n}\n\nexport default ViewUsers;\n","import \"../../stylesheets/settingsAdmin.css\";\nimport React from \"react\";\nimport { getNumUsers } from \"../../actions/user\";\nimport { getNumCompletedPosts, getNumPendingPosts } from \"../../actions/timeline\";\n\nclass AppStats extends React.Component {\n\n  state = {\n    num_users: 0,\n    num_requests_completed: 0,\n    num_requests_pending: 0,\n  }\n\n  componentDidMount() {\n    this.getAllUserCount();\n    this.getPostInfo();\n  }\n\n  async getAllUserCount() {\n    const num_users = await getNumUsers();\n\n    this.setState({\n      num_users,\n    })\n  }\n\n  async getPostInfo() {\n    const num_requests_completed = await getNumCompletedPosts();\n    const num_requests_pending = await getNumPendingPosts();\n\n    this.setState({\n      num_requests_completed,\n      num_requests_pending\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"statsContainer\">\n        <ul className=\"flexStats\">\n          <li className=\"displayStats\">\n            NUMBER OF ACTIVE USERS <p>{this.state.num_users}</p>\n          </li>\n          <li className=\"displayStats\">\n            NUMBER OF REQUESTS COMPLETED<p>{this.state.num_requests_completed}</p>\n          </li>\n          <li className=\"displayStats\">\n            NUMBER OF REQUESTS PENDING COMPLETION<p>{this.state.num_requests_pending}</p>\n          </li>\n        </ul>\n      </div>\n    );\n  }\n};\n\nexport default AppStats;\n","import React, { useState } from \"react\";\nimport \"../../stylesheets/settingsAdmin.css\";\nimport CreateAdmin from \"./CreateAdmin\";\nimport ViewUsers from \"./ViewUsers\";\nimport AppStats from \"./AppStats\";\nimport UserInfo from \"../UserInfo/UserInfo\";\nimport UserUpdateForm from \"../UserUpdateForm/UserUpdateForm\";\nimport { connect } from \"react-redux\";\n\nimport { Redirect } from \"react-router-dom\";\n\nimport { getUserById } from \"../../actions/user\";\n\nconst SettingsAdmin = (props) => {\n  const adminOptions = {\n    VIEW_USERS: \"View Users\",\n    APP_STATS: \"App Stats\",\n    UPDATE_INFO: \"Update Info\",\n  };\n\n  const [adminOption, setAdminOption] = useState(adminOptions.VIEW_USERS);\n  let SelectedOption = null;\n\n  switch (adminOption) {\n    case adminOptions.CREATE_ADMIN:\n      SelectedOption = CreateAdmin;\n      break;\n    case adminOptions.VIEW_USERS:\n      SelectedOption = ViewUsers;\n      break;\n    case adminOptions.APP_STATS:\n      SelectedOption = AppStats;\n      break;\n    case adminOptions.UPDATE_INFO:\n      SelectedOption = UserUpdateForm;\n      break;\n    default:\n      break;\n  }\n\n  const currentUser = props.currentUser;\n  if (currentUser === null) {\n    return <Redirect to=\"/login\" />;\n  } else if (!currentUser.admin) {\n    return <Redirect to=\"/settings\" />;\n  }\n\n  return (\n    <div className=\"settings-container slide\">\n      <UserInfo />\n      <div className=\"admin-dashboard\">\n        <div className=\"admin-dashboard-header\">\n          <h3>Admin Dashboard</h3>\n        </div>\n        <div className=\"tab-container\">\n          <button\n            className={`admin-tab ${\n              adminOption === adminOptions.VIEW_USERS ? \"active\" : \"\"\n            }`}\n            onClick={() => setAdminOption(adminOptions.VIEW_USERS)}\n          >\n            View Users\n          </button>\n          <button\n            className={`admin-tab  ${\n              adminOption === adminOptions.APP_STATS ? \"active\" : \"\"\n            }`}\n            onClick={() => setAdminOption(adminOptions.APP_STATS)}\n          >\n            App Stats\n          </button>\n          <button\n            className={`admin-tab ${\n              adminOption === adminOptions.UPDATE_INFO ? \"active\" : \"\"\n            }`}\n            onClick={() => setAdminOption(adminOptions.UPDATE_INFO)}\n          >\n            Personal Settings\n          </button>\n        </div>\n        <div className=\"content\">{adminOption && <SelectedOption />}</div>\n      </div>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    currentUser: state.auth.currentUser,\n  };\n};\nexport default connect(mapStateToProps, { getUserById })(SettingsAdmin);\n","import React from \"react\";\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\nimport { ToastContainer } from \"react-toastify\";\n\nimport { connect } from \"react-redux\";\n\nimport Home from \"./Home/Home\";\nimport Feed from \"./Feed/Feed\";\nimport Signup from \"./Auth/Signup\";\nimport Login from \"./Auth/Login\";\nimport Logout from \"./Auth/Logout\";\nimport Settings from \"./Settings/Settings\";\nimport SettingsAdmin from \"./SettingsAdmin/SettingsAdmin\";\n\nimport { readCookie } from \"../actions/user\";\n\nimport \"../stylesheets/shared.css\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.props.readCookie();\n  }\n\n  componentDidMount() {}\n\n  render() {\n    return (\n      <>\n        <BrowserRouter>\n          <Switch>\n            <Route path=\"/\" exact component={() => <Home />} />\n            <Route path=\"/feed\" component={() => <Feed />} />\n            <Route exact path=\"/signup\" component={() => <Signup />} />\n            <Route exact path=\"/login\" component={() => <Login />} />\n            <Route exact path=\"/settings\" component={() => <Settings />} />\n            <Route exact path=\"/admin\" component={() => <SettingsAdmin />} />\n            <Route\n              exact\n              path=\"/logout\"\n              component={() => <Logout users_state={this.state} />}\n            />\n          </Switch>\n        </BrowserRouter>\n        <ToastContainer />\n      </>\n    );\n  }\n}\n\nexport default connect(null, { readCookie })(App);\n","import { PAYLOAD_TYPES } from \"../actions/user\";\n\nconst INITIAL_STATE = {\n  currentUser: null,\n};\n\nexport default (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case PAYLOAD_TYPES.REGISTER:\n      return {\n        ...state,\n        currentUser: action.payload.currentUser,\n      };\n    case PAYLOAD_TYPES.LOGIN:\n      return {\n        ...state,\n        currentUser: action.payload.currentUser,\n      };\n    case PAYLOAD_TYPES.LOGOUT:\n      return {\n        ...state,\n        currentUser: null,\n      };\n    case PAYLOAD_TYPES.UPDATE_USER:\n      return {\n        ...state,\n        currentUser: action.payload.currentUser,\n      };\n    case PAYLOAD_TYPES.SET_COOKIE:\n      return {\n        ...state,\n        currentUser: action.payload.currentUser,\n      };\n    case PAYLOAD_TYPES.SET_PROFILE_PIC:\n      return {\n        ...state,\n        currentUser: action.payload.currentUser,\n      };\n    case PAYLOAD_TYPES.ACCEPT_POST:\n      return {\n        ...state,\n        currentUser: action.payload.currentUser,\n      };\n    case PAYLOAD_TYPES.COMPLETE_POST:\n      return {\n        ...state,\n        currentUser: action.payload.currentUser,\n      };\n    default:\n      return state;\n  }\n};\n","import { TL_PAYLOAD_TYPES } from \"../actions/timeline\";\n\nconst INITIAL_STATE = {\n  posts: null,\n};\n\nexport default (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case TL_PAYLOAD_TYPES.GET_POSTS:\n      return {\n        ...state,\n        posts: action.payload,\n      };\n    case TL_PAYLOAD_TYPES.CREATE_POST:\n      return {\n        ...state,\n        posts: action.payload,\n      };\n    case TL_PAYLOAD_TYPES.DELETE_POST:\n      return {\n        ...state,\n        posts: action.payload,\n      };\n    case TL_PAYLOAD_TYPES.EDIT_POST:\n      return {\n        ...state,\n        posts: action.payload,\n      };\n    case TL_PAYLOAD_TYPES.FILTER_POSTS:\n      return {\n        ...state,\n        posts: action.payload,\n      };\n    case TL_PAYLOAD_TYPES.GET_USER_POSTS:\n      return {\n        ...state,\n        posts: action.payload,\n      };\n    default:\n      return state;\n  }\n};\n","import { combineReducers } from \"redux\";\nimport AuthReducer from \"./AuthReducer\";\nimport PostsReducer from \"./PostsReducer\";\n\nexport default combineReducers({\n  auth: AuthReducer,\n  posts: PostsReducer,\n});\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { createStore, applyMiddleware, compose } from \"redux\";\nimport reduxThunk from \"redux-thunk\";\n\nimport App from \"./components/App\";\nimport \"./stylesheets/shared.css\";\nimport reducers from \"./reducers\";\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst store = createStore(\n  reducers,\n  composeEnhancers(applyMiddleware(reduxThunk))\n);\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}